#[version = "0.0.5"]
def @main(%x0 : Tensor[(13, 13), float16] /* ty=Tensor[(13, 13), float16] span=from_string:3:14 */, %x1 : Tensor[(26), float16] /* ty=Tensor[(26), float16] span=from_string:10:26 */, %x2 : Tensor[(26), float16] /* ty=Tensor[(26), float16] span=from_string:10:31 */, hash="c36258bffb838f36", ) -> (Tensor[(13), float16],) {
  %11 = fn (%p02: Tensor[(13, 13), float16] /* ty=Tensor[(13, 13), float16] */, Primitive=1, hash="4db1c94316008a39") -> Tensor[(13, 26), float16] {
    %6 = (%p02, %p02) /* ty=(Tensor[(13, 13), float16], Tensor[(13, 13), float16]) span=from_string:4:20 */;
    %7 = concatenate(%6, axis=1) /* ty=Tensor[(13, 26), float16] */;
    %8 = nn.relu(%7) /* ty=Tensor[(13, 26), float16] */;
    %9 = negative(%8) /* ty=Tensor[(13, 26), float16] */;
    %10 = add(%9, %7) /* ty=Tensor[(13, 26), float16] */;
    nn.batch_flatten(%10) /* ty=Tensor[(13, 26), float16] */
  } /* ty=fn (Tensor[(13, 13), float16]) -> Tensor[(13, 26), float16] */;
  %12 = %11(%x0) /* ty=Tensor[(13, 26), float16] */;
  %13 = fn (%p01: Tensor[(13, 26), float16] /* ty=Tensor[(13, 26), float16] */, Primitive=1, hash="68051c186c0e3d1c") -> Tensor[(13, 26), float16] {
    nn.fast_softmax(%p01, axis=1) /* ty=Tensor[(13, 26), float16] */
  } /* ty=fn (Tensor[(13, 26), float16]) -> Tensor[(13, 26), float16] */;
  %14 = %13(%12) /* ty=Tensor[(13, 26), float16] */;
  %15 = fn (%p03: Tensor[(13, 26), float16] /* ty=Tensor[(13, 26), float16] */, Primitive=1, hash="c86a1822db93e182") -> Tensor[(13, 1), float16] {
    mean(%p03, axis=[1], keepdims=True) /* ty=Tensor[(13, 1), float16] */
  } /* ty=fn (Tensor[(13, 26), float16]) -> Tensor[(13, 1), float16] */;
  %16 = %15(%14) /* ty=Tensor[(13, 1), float16] */;
  %17 = fn (%p04: Tensor[(13, 26), float16] /* ty=Tensor[(13, 26), float16] */, %p11: Tensor[(13, 1), float16] /* ty=Tensor[(13, 1), float16] */, Primitive=1, hash="4794e79e913b0c92") -> Tensor[(13, 1), float16] {
    variance(%p04, %p11, axis=[1], keepdims=True) /* ty=Tensor[(13, 1), float16] */
  } /* ty=fn (Tensor[(13, 26), float16], Tensor[(13, 1), float16]) -> Tensor[(13, 1), float16] */;
  %18 = %17(%14, %16) /* ty=Tensor[(13, 1), float16] */;
  %19 = fn (%p0: Tensor[(13, 26), float16] /* ty=Tensor[(13, 26), float16] */, %p1: Tensor[(13, 1), float16] /* ty=Tensor[(13, 1), float16] */, %p2: Tensor[(13, 1), float16] /* ty=Tensor[(13, 1), float16] */, %p3: float16 /* ty=float16 */, %p4: Tensor[(26), float16] /* ty=Tensor[(26), float16] */, %p5: Tensor[(26), float16] /* ty=Tensor[(26), float16] */, Primitive=1, hash="c84179b4fc82b37e") -> Tensor[(13), float16] {
    %0 = add(%p2, %p3) /* ty=Tensor[(13, 1), float16] */;
    %1 = subtract(%p0, %p1) /* ty=Tensor[(13, 26), float16] */;
    %2 = sqrt(%0) /* ty=Tensor[(13, 1), float16] */;
    %3 = divide(%1, %2) /* ty=Tensor[(13, 26), float16] */;
    %4 = multiply(%3, %p4) /* ty=Tensor[(13, 26), float16] */;
    %5 = add(%4, %p5) /* ty=Tensor[(13, 26), float16] */;
    min(%5, axis=[1]) /* ty=Tensor[(13), float16] */
  } /* ty=fn (Tensor[(13, 26), float16], Tensor[(13, 1), float16], Tensor[(13, 1), float16], float16, Tensor[(26), float16], Tensor[(26), float16]) -> Tensor[(13), float16] */;
  %20 = %19(%14, %16, %18, 1.00136e-05f16 /* ty=float16 */, %x1, %x2) /* ty=Tensor[(13), float16] */;
  (%20,) /* ty=(Tensor[(13), float16],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "VirtualDevice"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "15", 
        "target": "4", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "14", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "7", 
        "name": "6"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [12]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "0", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.16.0"}
}
#[version = "0.0.5"]
def @main(%pzx : Tensor[(64, 4), float32] /* ty=Tensor[(64, 4), float32] span=from_string:3:17 */, %pzweight : Tensor[(3, 4), float32] /* ty=Tensor[(3, 4), float32] span=from_string:3:23 */, %pzin_bias : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:16 */, %px1 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:8:26 */, %px2 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:8:32 */, %px3 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:8:38 */, %px4 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:8:44 */, %px5 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:17:28 */, %px6 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:17:34 */, %px7 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:19:28 */, %px8 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:19:34 */, %px9 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:19:40 */, %px10 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:19:46 */, hash="59bf18d194232a1e", ) -> (Tensor[(64, 1), float32],) {
  %38 = fn (%p07: Tensor[(3, 4), float32] /* ty=Tensor[(3, 4), float32] */, %p14: Tensor[(3, 1), float32] /* ty=Tensor[(3, 1), float32] */, Primitive=1, hash="6311b209ee0e8190", src_layout="NC", dst_layout="NC3n") -> Tensor[(1, 4, 3), float32] {
    %37 = multiply(%p07, %p14) /* ty=Tensor[(3, 4), float32] */;
    layout_transform(%37, src_layout="NC", dst_layout="NC3n") /* ty=Tensor[(1, 4, 3), float32] */
  } /* ty=fn (Tensor[(3, 4), float32], Tensor[(3, 1), float32]) -> Tensor[(1, 4, 3), float32] */;
  %39 = %38(%pzweight, meta[relay.Constant][0] /* ty=Tensor[(3, 1), float32] */) /* ty=Tensor[(1, 4, 3), float32] */;
  %40 = fn (%p06: Tensor[(64, 4), float32] /* ty=Tensor[(64, 4), float32] */, %p13: Tensor[(1, 4, 3), float32] /* ty=Tensor[(1, 4, 3), float32] */, %p22: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p32: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, Primitive=1, hash="49193a2783423cea", weight_layout="NC3n") -> Tensor[(64, 3), float32] {
    %33 = multiply(%p22, %p32) /* ty=Tensor[(3), float32] */;
    %34 = nn.contrib_dense_pack(%p06, %p13, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(64, 3), float32] */;
    %35 = expand_dims(%33, axis=0) /* ty=Tensor[(1, 3), float32] */;
    %36 = add(%34, %35) /* ty=Tensor[(64, 3), float32] */;
    nn.relu(%36) /* ty=Tensor[(64, 3), float32] */
  } /* ty=fn (Tensor[(64, 4), float32], Tensor[(1, 4, 3), float32], Tensor[(3), float32], Tensor[(3), float32]) -> Tensor[(64, 3), float32] */;
  %41 = %40(%pzx, %39, %pzin_bias, meta[relay.Constant][1] /* ty=Tensor[(3), float32] span=from_string:6:27 */) /* ty=Tensor[(64, 3), float32] */;
  %42 = fn (%p05: Tensor[(64, 3), float32] /* ty=Tensor[(64, 3), float32] */, Primitive=1, hash="864fd3f63600115a") -> Tensor[(64, 1), float32] {
    sum(%p05, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 3), float32]) -> Tensor[(64, 1), float32] */;
  %43 = %42(%41) /* ty=Tensor[(64, 1), float32] */;
  %44 = fn (%p04: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p12: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p21: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p31: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="c5b6d068d0c78150") -> Tensor[(64, 1), float32] {
    %26 = add(%p04, 1e-05f /* ty=float32 */) /* ty=Tensor[(1), float32] */;
    %27 = sqrt(%26) /* ty=Tensor[(1), float32] */;
    %28 = divide(1f /* ty=float32 */, %27) /* ty=Tensor[(1), float32] */;
    %29 = negative(%p21) /* ty=Tensor[(1), float32] */;
    %30 = multiply(%29, %28) /* ty=Tensor[(1), float32] */;
    %31 = multiply(%p12, %28) /* ty=Tensor[(64, 1), float32] */;
    %32 = add(%30, %p31) /* ty=Tensor[(1), float32] */;
    add(%31, %32) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(1), float32], Tensor[(64, 1), float32], Tensor[(1), float32], Tensor[(1), float32]) -> Tensor[(64, 1), float32] */;
  %45 = %44(%px4, %43, %px3, %px2) /* ty=Tensor[(64, 1), float32] */;
  %46 = fn (%p03: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="cf2103db9211f162") -> Tensor[(64, 1), float32] {
    max(%p03, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %47 = %46(%45) /* ty=Tensor[(64, 1), float32] */;
  %48 = fn (%p02: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="6a5ab8b58cc43865") -> Tensor[(64, 1), float32] {
    %24 = nn.leaky_relu(%p02, alpha=0.73123f) /* ty=Tensor[(64, 1), float32] */;
    %25 = ceil(%24) /* ty=Tensor[(64, 1), float32] */;
    abs(%25) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %49 = %48(%47) /* ty=Tensor[(64, 1), float32] */;
  %50 = fn (%p01: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p11: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="b3a5a24e8bca9760") -> Tensor[(64, 1), float32] {
    %22 = floor(%p01) /* ty=Tensor[(64, 1), float32] */;
    %23 = subtract(%p11, %22) /* ty=Tensor[(64, 1), float32] */;
    negative(%23) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %51 = %50(%49, %45) /* ty=Tensor[(64, 1), float32] */;
  %52 = fn (%p08: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="9e68f00b7b357188") -> Tensor[(64, 1), float32] {
    mean(%p08, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %53 = %52(%51) /* ty=Tensor[(64, 1), float32] */;
  %54 = fn (%p09: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p15: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="44313a229d4ac329") -> Tensor[(64, 1), float32] {
    variance(%p09, %p15, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %55 = %54(%51, %53) /* ty=Tensor[(64, 1), float32] */;
  %56 = fn (%p0: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p1: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p2: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p3: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p4: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p5: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p6: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p7: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p8: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p9: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="9ef3a4ddbb5ab83e") -> Tensor[(64, 1), float32] {
    %0 = add(%p2, 1e-05f /* ty=float32 */) /* ty=Tensor[(64, 1), float32] */;
    %1 = subtract(%p0, %p1) /* ty=Tensor[(64, 1), float32] */;
    %2 = sqrt(%0) /* ty=Tensor[(64, 1), float32] */;
    %3 = divide(%1, %2) /* ty=Tensor[(64, 1), float32] */;
    %4 = multiply(%3, %p3) /* ty=Tensor[(64, 1), float32] */;
    %5 = add(%4, %p4) /* ty=Tensor[(64, 1), float32] */;
    %6 = add(%p6, 1e-05f /* ty=float32 */) /* ty=Tensor[(1), float32] */;
    %7 = sqrt(%6) /* ty=Tensor[(1), float32] */;
    %8 = divide(1f /* ty=float32 */, %7) /* ty=Tensor[(1), float32] */;
    %9 = subtract(%5, %p5) /* ty=Tensor[(64, 1), float32] */;
    %10 = multiply(%8, %p7) /* ty=Tensor[(1), float32] */;
    %11 = negative(%p8) /* ty=Tensor[(1), float32] */;
    %12 = multiply(%9, %10) /* ty=Tensor[(64, 1), float32] */;
    %13 = multiply(%11, %10) /* ty=Tensor[(1), float32] */;
    %14 = add(%12, %13) /* ty=Tensor[(64, 1), float32] */;
    %15 = sin(%14) /* ty=Tensor[(64, 1), float32] */;
    %16 = sin(%15) /* ty=Tensor[(64, 1), float32] */;
    %17 = multiply(%16, %15) /* ty=Tensor[(64, 1), float32] */;
    %18 = nn.batch_flatten(%17) /* ty=Tensor[(64, 1), float32] */;
    %19 = divide(%p9, %18) /* ty=Tensor[(64, 1), float32] */;
    %20 = floor(%19) /* ty=Tensor[(64, 1), float32] */;
    %21 = fast_tanh(%20) /* ty=Tensor[(64, 1), float32] */;
    abs(%21) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32], Tensor[(64, 1), float32], Tensor[(1), float32], Tensor[(1), float32], Tensor[(64, 1), float32], Tensor[(1), float32], Tensor[(1), float32], Tensor[(1), float32], Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %57 = %56(%51, %53, %55, %px5, %px6, %49, %px10, %px7, %px9, %43) /* ty=Tensor[(64, 1), float32] */;
  (%57,) /* ty=(Tensor[(64, 1), float32],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant", 
        "relay.attrs.DensePackAttrs", 
        "VirtualDevice"
      ], 
      "data": [2, 18, 21]
    }, 
    {
      "type_key": "Array", 
      "data": [3, 10]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "6", 
        "data": "0", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "7", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [8, 9]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "3"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "15", 
        "data": "1", 
        "span": "13", 
        "virtual_device_": "11"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "12", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "27", 
        "end_column": "45", 
        "end_line": "6", 
        "line": "6", 
        "source_name": "14"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "16", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [17]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "3"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [19]
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "20"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC3n"
    }, 
    {
      "type_key": "Array", 
      "data": [22]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "34", 
        "target": "23", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "30", 
        "features": "32", 
        "host": "33", 
        "keys": "29", 
        "kind": "24", 
        "tag": "28"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "26", 
        "name": "25"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [27]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [27]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [31]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "30", 
        "features": "32", 
        "host": "0", 
        "keys": "29", 
        "kind": "24", 
        "tag": "28"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAgAAAAIgAQADAAAAAAAAAAEAAAAAAAAADAAAAAAAAADOwDs/O7QtPwEPST8=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQADAAAAAAAAAAwAAAAAAAAAzsA7Pzu0LT8BD0k/"
  ], 
  "attrs": {"tvm_version": "0.16.0"}
}
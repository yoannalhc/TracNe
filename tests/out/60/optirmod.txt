#[version = "0.0.5"]
def @main(%x0 : Tensor[(5), float32] /* ty=Tensor[(5), float32] span=from_string:3:16 */, %x1 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:11:24 */, %x2 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:12:21 */, %x3 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:18:26 */, %x4 : Tensor[(16, 1), float32] /* ty=Tensor[(16, 1), float32] span=from_string:40:23 */, %x5 : Tensor[(5, 2), float32] /* ty=Tensor[(5, 2), float32] span=from_string:26:23 */, %x6 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:33:28 */, %x7 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:33:33 */, %x8 : Tensor[(18), float32] /* ty=Tensor[(18), float32] span=from_string:50:28 */, %x9 : Tensor[(18), float32] /* ty=Tensor[(18), float32] span=from_string:50:33 */, %x10 : Tensor[(5), float32] /* ty=Tensor[(5), float32] span=from_string:28:26 */, %x11 : Tensor[(5), float32] /* ty=Tensor[(5), float32] span=from_string:31:28 */, %x12 : Tensor[(5), float32] /* ty=Tensor[(5), float32] span=from_string:31:34 */, %x13 : Tensor[(10, 5), float32] /* ty=Tensor[(10, 5), float32] span=from_string:52:23 */, %x14 : Tensor[(5), float32] /* ty=Tensor[(5), float32] span=from_string:39:28 */, %x15 : Tensor[(5), float32] /* ty=Tensor[(5), float32] span=from_string:39:34 */, %x16 : Tensor[(5), float32] /* ty=Tensor[(5), float32] span=from_string:54:28 */, %x17 : Tensor[(5), float32] /* ty=Tensor[(5), float32] span=from_string:54:34 */, hash="bbaf2e438750d7c8", ) -> (Tensor[(5, 10), float32], Tensor[(5, 2), float32], Tensor[(5, 5), float32], Tensor[(5, 18), float32]) {
  %12 = fn (%p011: Tensor[(5), float32] /* ty=Tensor[(5), float32] */, Primitive=1, relay.reshape_only=1, hash="e38710a3ff177265") -> Tensor[(5, 1), float32] {
    reshape(%p011, newshape=[5, 1]) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5), float32]) -> Tensor[(5, 1), float32] */;
  %13 = %12(%x0) /* ty=Tensor[(5, 1), float32] */;
  %14 = fn (%p010: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="8c12577e66f012d5") -> Tensor[(5, 1), float32] {
    nn.leaky_relu(%p010, alpha=0.0558698f) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %15 = %14(%13) /* ty=Tensor[(5, 1), float32] */;
  %16 = fn (%p09: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="260aaa8b2f2489cc") -> Tensor[(5, 1), float32] {
    cos(%p09) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %17 = %16(%15) /* ty=Tensor[(5, 1), float32] */;
  %18 = fn (%p08: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="7d4e829051bb5ede") -> Tensor[(5, 1), float32] {
    tan(%p08) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %19 = %18(%17) /* ty=Tensor[(5, 1), float32] */;
  %20 = fn (%p07: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="24a90f491e0f4350") -> Tensor[(5, 1), float32] {
    nn.fast_softmax(%p07, axis=1) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %21 = %20(%19) /* ty=Tensor[(5, 1), float32] */;
  %22 = fn (%p06: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="29130e1fbbd9c266") -> Tensor[(5, 1), float32] {
    %11 = nn.fast_softmax(%p06, axis=1) /* ty=Tensor[(5, 1), float32] */;
    nn.leaky_relu(%11, alpha=0.579907f) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %26 = fn (%p015: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p18: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="e892d7d9ba0e43cf") -> Tensor[(5, 1), float32] {
    add(%p015, %p18) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %27 = %26(%21, %15) /* ty=Tensor[(5, 1), float32] */;
  %28 = fn (%p014: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p17: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="e632a89ad6a0d660") -> Tensor[(5, 1), float32] {
    %25 = nn.fast_softmax(%p014, axis=1) /* ty=Tensor[(5, 1), float32] */;
    maximum(%25, %p17) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %29 = %28(%27, %13) /* ty=Tensor[(5, 1), float32] */;
  %30 = fn (%p013: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p16: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p22: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p3: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="9a5edd97b4dcec53") -> Tensor[(5, 1), float32] {
    %23 = add(%p013, %p16) /* ty=Tensor[(5, 1), float32] */;
    %24 = nn.prelu(%p22, %p3) /* ty=Tensor[(5, 1), float32] */;
    subtract(%23, %24) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32], Tensor[(1), float32], Tensor[(5, 1), float32], Tensor[(1), float32]) -> Tensor[(5, 1), float32] */;
  %31 = %30(%29, %x1, %17, %x2) /* ty=Tensor[(5, 1), float32] */;
  %32 = fn (%p012: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="496e37d8e5c0ea87") -> Tensor[(5, 1), float32] {
    transpose(%p012, axes=[0, 1]) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %33 = %22(%21) /* ty=Tensor[(5, 1), float32] */;
  %34 = %32(%31) /* ty=Tensor[(5, 1), float32] */;
  %35 = fn (%p05: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p15: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p21: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="aef60e86f253b520") -> Tensor[(5, 2), float32] {
    %8 = trunc(%p05) /* ty=Tensor[(5, 1), float32] */;
    %9 = add(%8, %p15) /* ty=Tensor[(5, 1), float32] */;
    %10 = (%p21, %9) /* ty=(Tensor[(5, 1), float32], Tensor[(5, 1), float32]) span=from_string:20:21 */;
    concatenate(%10, axis=1) /* ty=Tensor[(5, 2), float32] */
  } /* ty=fn (Tensor[(5, 1), float32], Tensor[(1), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 2), float32] */;
  %38 = %35(%33, %x3, %34) /* ty=Tensor[(5, 2), float32] */;
  %39 = fn (%p016: Tensor[(5, 2), float32] /* ty=Tensor[(5, 2), float32] */, Primitive=1, hash="5f4fa7bdbbfc467e") -> Tensor[(5, 2), float32] {
    %36 = split(%p016, indices_or_sections=[], axis=1) /* ty=(Tensor[(5, 2), float32],) */;
    %37 = %36.0 /* ty=Tensor[(5, 2), float32] */;
    nn.relu(%37) /* ty=Tensor[(5, 2), float32] */
  } /* ty=fn (Tensor[(5, 2), float32]) -> Tensor[(5, 2), float32] */;
  %40 = %39(%38) /* ty=Tensor[(5, 2), float32] */;
  %41 = fn (%p04: Tensor[(5, 2), float32] /* ty=Tensor[(5, 2), float32] */, %p14: Tensor[(5, 2), float32] /* ty=Tensor[(5, 2), float32] */, Primitive=1, hash="9ea70ff947dbab3e") -> Tensor[(5, 2), float32] {
    %7 = trunc(%p04) /* ty=Tensor[(5, 2), float32] */;
    maximum(%7, %p14) /* ty=Tensor[(5, 2), float32] */
  } /* ty=fn (Tensor[(5, 2), float32], Tensor[(5, 2), float32]) -> Tensor[(5, 2), float32] */;
  %42 = fn (%p017: Tensor[(5, 2), float32] /* ty=Tensor[(5, 2), float32] */, Primitive=1, hash="93053996d8a899cd", src_layout="NC", dst_layout="NC5n") -> Tensor[(1, 2, 5), float32] {
    layout_transform(%p017, src_layout="NC", dst_layout="NC5n") /* ty=Tensor[(1, 2, 5), float32] */
  } /* ty=fn (Tensor[(5, 2), float32]) -> Tensor[(1, 2, 5), float32] */;
  %43 = %41(%38, %40) /* ty=Tensor[(5, 2), float32] */;
  %44 = %42(%x5) /* ty=Tensor[(1, 2, 5), float32] */;
  %45 = fn (%p03: Tensor[(5, 2), float32] /* ty=Tensor[(5, 2), float32] */, %p13: Tensor[(1, 2, 5), float32] /* ty=Tensor[(1, 2, 5), float32] */, Primitive=1, hash="3d3d0163f74bd92c", weight_layout="NC5n") -> Tensor[(5, 5), float32] {
    nn.contrib_dense_pack(%p03, %p13, meta[relay.attrs.DensePackAttrs][1]) /* ty=Tensor[(5, 5), float32] */
  } /* ty=fn (Tensor[(5, 2), float32], Tensor[(1, 2, 5), float32]) -> Tensor[(5, 5), float32] */;
  %46 = %45(%43, %44) /* ty=Tensor[(5, 5), float32] */;
  %47 = fn (%p02: Tensor[(5, 5), float32] /* ty=Tensor[(5, 5), float32] */, %p12: Tensor[(5), float32] /* ty=Tensor[(5), float32] */, Primitive=1, hash="f2f678a2e0ed3586") -> Tensor[(5, 5), float32] {
    %3 = fast_tanh(%p02) /* ty=Tensor[(5, 5), float32] */;
    %4 = expand_dims(%p12, axis=0) /* ty=Tensor[(1, 5), float32] */;
    %5 = add(%3, %4) /* ty=Tensor[(5, 5), float32] */;
    %6 = nn.relu(%5) /* ty=Tensor[(5, 5), float32] */;
    nn.relu(%6) /* ty=Tensor[(5, 5), float32] */
  } /* ty=fn (Tensor[(5, 5), float32], Tensor[(5), float32]) -> Tensor[(5, 5), float32] */;
  %48 = %47(%46, %x10) /* ty=Tensor[(5, 5), float32] */;
  %49 = fn (%p018: Tensor[(5, 5), float32] /* ty=Tensor[(5, 5), float32] */, Primitive=1, hash="017f174c08c63f04") -> Tensor[(5, 1), float32] {
    mean(%p018, axis=[1], keepdims=True) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 5), float32]) -> Tensor[(5, 1), float32] */;
  %50 = %49(%48) /* ty=Tensor[(5, 1), float32] */;
  %51 = fn (%p019: Tensor[(5, 5), float32] /* ty=Tensor[(5, 5), float32] */, %p19: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="44175072f0f7a0ca") -> Tensor[(5, 1), float32] {
    variance(%p019, %p19, axis=[1], keepdims=True) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 5), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %52 = %51(%48, %50) /* ty=Tensor[(5, 1), float32] */;
  %53 = fn (%p01: Tensor[(5, 5), float32] /* ty=Tensor[(5, 5), float32] */, %p11: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p2: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="78e8bd50ce921eda") -> Tensor[(5, 5), float32] {
    %0 = add(%p2, 1e-05f /* ty=float32 */) /* ty=Tensor[(5, 1), float32] */;
    %1 = subtract(%p01, %p11) /* ty=Tensor[(5, 5), float32] */;
    %2 = sqrt(%0) /* ty=Tensor[(5, 1), float32] */;
    divide(%1, %2) /* ty=Tensor[(5, 5), float32] */
  } /* ty=fn (Tensor[(5, 5), float32], Tensor[(5, 1), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 5), float32] */;
  %54 = fn (%p020: Tensor[(10, 5), float32] /* ty=Tensor[(10, 5), float32] */, Primitive=1, hash="75720cb674760398", src_layout="NC", dst_layout="NC5n") -> Tensor[(2, 5, 5), float32] {
    layout_transform(%p020, src_layout="NC", dst_layout="NC5n") /* ty=Tensor[(2, 5, 5), float32] */
  } /* ty=fn (Tensor[(10, 5), float32]) -> Tensor[(2, 5, 5), float32] */;
  %55 = %53(%48, %50, %52) /* ty=Tensor[(5, 5), float32] */;
  %56 = %54(%x13) /* ty=Tensor[(2, 5, 5), float32] */;
  %57 = fn (%p0: Tensor[(5, 5), float32] /* ty=Tensor[(5, 5), float32] */, %p1: Tensor[(2, 5, 5), float32] /* ty=Tensor[(2, 5, 5), float32] */, Primitive=1, hash="812248dbbf228ef6", weight_layout="NC5n") -> Tensor[(5, 10), float32] {
    nn.contrib_dense_pack(%p0, %p1, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(5, 10), float32] */
  } /* ty=fn (Tensor[(5, 5), float32], Tensor[(2, 5, 5), float32]) -> Tensor[(5, 10), float32] */;
  %71 = fn (%p022: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="67fe665eddffab5e") -> Tensor[(5, 1, 1), float32] {
    %70 = fast_exp(%p022) /* ty=Tensor[(5, 1), float32] */;
    reshape(%70, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1, 1), float32] */;
  %72 = %71(%19) /* ty=Tensor[(5, 1, 1), float32] */;
  %73 = fn (%p023: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, Primitive=1, hash="42218d39e6554576") -> Tensor[(5, 1, 1), float32] {
    mean(%p023, axis=[2], keepdims=True) /* ty=Tensor[(5, 1, 1), float32] */
  } /* ty=fn (Tensor[(5, 1, 1), float32]) -> Tensor[(5, 1, 1), float32] */;
  %74 = %73(%72) /* ty=Tensor[(5, 1, 1), float32] */;
  %75 = fn (%p024: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, %p111: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, Primitive=1, hash="d34f09f084b710c0") -> Tensor[(5, 1, 1), float32] {
    variance(%p024, %p111, axis=[2], keepdims=True) /* ty=Tensor[(5, 1, 1), float32] */
  } /* ty=fn (Tensor[(5, 1, 1), float32], Tensor[(5, 1, 1), float32]) -> Tensor[(5, 1, 1), float32] */;
  %76 = %75(%72, %74) /* ty=Tensor[(5, 1, 1), float32] */;
  %77 = fn (%p021: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, %p110: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, %p23: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, %p31: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p4: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p5: Tensor[(5, 2), float32] /* ty=Tensor[(5, 2), float32] */, Primitive=1, hash="68c65459ca7f4f60") -> Tensor[(5, 2), float32] {
    %58 = add(%p23, 1e-05f /* ty=float32 */) /* ty=Tensor[(5, 1, 1), float32] */;
    %59 = subtract(%p021, %p110) /* ty=Tensor[(5, 1, 1), float32] */;
    %60 = sqrt(%58) /* ty=Tensor[(5, 1, 1), float32] */;
    %61 = divide(%59, %60) /* ty=Tensor[(5, 1, 1), float32] */;
    %62 = reshape(%61, newshape=[5, 1]) /* ty=Tensor[(5, 1), float32] */;
    %63 = multiply(%62, %p31) /* ty=Tensor[(5, 1), float32] */;
    %64 = add(%63, %p4) /* ty=Tensor[(5, 1), float32] */;
    %65 = transpose(%p5, axes=[0, 1]) /* ty=Tensor[(5, 2), float32] */;
    %66 = add(%64, %65) /* ty=Tensor[(5, 2), float32] */;
    %67 = nn.batch_flatten(%66) /* ty=Tensor[(5, 2), float32] */;
    %68 = nn.batch_flatten(%67) /* ty=Tensor[(5, 2), float32] */;
    %69 = round(%68) /* ty=Tensor[(5, 2), float32] */;
    reshape(%69, newshape=[5, 2]) /* ty=Tensor[(5, 2), float32] */
  } /* ty=fn (Tensor[(5, 1, 1), float32], Tensor[(5, 1, 1), float32], Tensor[(5, 1, 1), float32], Tensor[(1), float32], Tensor[(1), float32], Tensor[(5, 2), float32]) -> Tensor[(5, 2), float32] */;
  %89 = fn (%p027: Tensor[(5, 5), float32] /* ty=Tensor[(5, 5), float32] */, Primitive=1, relay.reshape_only=1, hash="dc47fcb7b78a2529") -> Tensor[(5, 1, 5), float32] {
    reshape(%p027, newshape=[5, 1, 5]) /* ty=Tensor[(5, 1, 5), float32] */
  } /* ty=fn (Tensor[(5, 5), float32]) -> Tensor[(5, 1, 5), float32] */;
  %90 = %89(%46) /* ty=Tensor[(5, 1, 5), float32] */;
  %91 = fn (%p028: Tensor[(5, 1, 5), float32] /* ty=Tensor[(5, 1, 5), float32] */, Primitive=1, hash="8bf955334126ba83") -> Tensor[(5, 1, 1), float32] {
    mean(%p028, axis=[2], keepdims=True) /* ty=Tensor[(5, 1, 1), float32] */
  } /* ty=fn (Tensor[(5, 1, 5), float32]) -> Tensor[(5, 1, 1), float32] */;
  %92 = %91(%90) /* ty=Tensor[(5, 1, 1), float32] */;
  %93 = fn (%p029: Tensor[(5, 1, 5), float32] /* ty=Tensor[(5, 1, 5), float32] */, %p114: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, Primitive=1, hash="01caa5087066ae86") -> Tensor[(5, 1, 1), float32] {
    variance(%p029, %p114, axis=[2], keepdims=True) /* ty=Tensor[(5, 1, 1), float32] */
  } /* ty=fn (Tensor[(5, 1, 5), float32], Tensor[(5, 1, 1), float32]) -> Tensor[(5, 1, 1), float32] */;
  %94 = %93(%90, %92) /* ty=Tensor[(5, 1, 1), float32] */;
  %95 = fn (%p026: Tensor[(5, 1, 5), float32] /* ty=Tensor[(5, 1, 5), float32] */, %p113: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, %p25: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, %p33: Tensor[(5), float32] /* ty=Tensor[(5), float32] */, Primitive=1, hash="f886445e3c19a99e") -> Tensor[(5, 1, 5), float32] {
    %83 = add(%p25, 1e-05f /* ty=float32 */) /* ty=Tensor[(5, 1, 1), float32] */;
    %84 = subtract(%p026, %p113) /* ty=Tensor[(5, 1, 5), float32] */;
    %85 = sqrt(%83) /* ty=Tensor[(5, 1, 1), float32] */;
    %86 = divide(%84, %85) /* ty=Tensor[(5, 1, 5), float32] */;
    %87 = reshape(%86, newshape=[5, 5]) /* ty=Tensor[(5, 5), float32] */;
    %88 = add(%87, %p33) /* ty=Tensor[(5, 5), float32] */;
    reshape(%88, newshape=[5, 1, 5]) /* ty=Tensor[(5, 1, 5), float32] */
  } /* ty=fn (Tensor[(5, 1, 5), float32], Tensor[(5, 1, 1), float32], Tensor[(5, 1, 1), float32], Tensor[(5), float32]) -> Tensor[(5, 1, 5), float32] */;
  %96 = %95(%90, %92, %94, %x15) /* ty=Tensor[(5, 1, 5), float32] */;
  %97 = fn (%p030: Tensor[(5, 1, 5), float32] /* ty=Tensor[(5, 1, 5), float32] */, Primitive=1, hash="8bf955334126ba83") -> Tensor[(5, 1, 1), float32] {
    mean(%p030, axis=[2], keepdims=True) /* ty=Tensor[(5, 1, 1), float32] */
  } /* ty=fn (Tensor[(5, 1, 5), float32]) -> Tensor[(5, 1, 1), float32] */;
  %98 = %97(%96) /* ty=Tensor[(5, 1, 1), float32] */;
  %99 = fn (%p031: Tensor[(5, 1, 5), float32] /* ty=Tensor[(5, 1, 5), float32] */, %p115: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, Primitive=1, hash="01caa5087066ae86") -> Tensor[(5, 1, 1), float32] {
    variance(%p031, %p115, axis=[2], keepdims=True) /* ty=Tensor[(5, 1, 1), float32] */
  } /* ty=fn (Tensor[(5, 1, 5), float32], Tensor[(5, 1, 1), float32]) -> Tensor[(5, 1, 1), float32] */;
  %100 = %99(%96, %98) /* ty=Tensor[(5, 1, 1), float32] */;
  %101 = fn (%p025: Tensor[(5, 1, 5), float32] /* ty=Tensor[(5, 1, 5), float32] */, %p112: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, %p24: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, %p32: Tensor[(5), float32] /* ty=Tensor[(5), float32] */, Primitive=1, hash="1ba3359bda305098") -> Tensor[(5, 5), float32] {
    %78 = add(%p24, 1e-05f /* ty=float32 */) /* ty=Tensor[(5, 1, 1), float32] */;
    %79 = subtract(%p025, %p112) /* ty=Tensor[(5, 1, 5), float32] */;
    %80 = sqrt(%78) /* ty=Tensor[(5, 1, 1), float32] */;
    %81 = divide(%79, %80) /* ty=Tensor[(5, 1, 5), float32] */;
    %82 = reshape(%81, newshape=[5, 5]) /* ty=Tensor[(5, 5), float32] */;
    multiply(%82, %p32) /* ty=Tensor[(5, 5), float32] */
  } /* ty=fn (Tensor[(5, 1, 5), float32], Tensor[(5, 1, 1), float32], Tensor[(5, 1, 1), float32], Tensor[(5), float32]) -> Tensor[(5, 5), float32] */;
  %113 = fn (%p037: Tensor[(16, 1), float32] /* ty=Tensor[(16, 1), float32] */, Primitive=1, hash="0de4c8425c47f64a", src_layout="NC", dst_layout="NC8n") -> Tensor[(2, 1, 8), float32] {
    layout_transform(%p037, src_layout="NC", dst_layout="NC8n") /* ty=Tensor[(2, 1, 8), float32] */
  } /* ty=fn (Tensor[(16, 1), float32]) -> Tensor[(2, 1, 8), float32] */;
  %114 = %113(%x4) /* ty=Tensor[(2, 1, 8), float32] */;
  %115 = fn (%p036: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p119: Tensor[(2, 1, 8), float32] /* ty=Tensor[(2, 1, 8), float32] */, Primitive=1, hash="b3cbb2594a2fb4a2", weight_layout="NC8n") -> Tensor[(5, 16), float32] {
    nn.contrib_dense_pack(%p036, %p119, meta[relay.attrs.DensePackAttrs][2]) /* ty=Tensor[(5, 16), float32] */
  } /* ty=fn (Tensor[(5, 1), float32], Tensor[(2, 1, 8), float32]) -> Tensor[(5, 16), float32] */;
  %116 = %115(%33, %114) /* ty=Tensor[(5, 16), float32] */;
  %117 = fn (%p035: Tensor[(5, 16), float32] /* ty=Tensor[(5, 16), float32] */, %p118: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p28: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="1cca157c3a76f261") -> Tensor[(5, 1), float32] {
    %111 = maximum(%p035, %p118) /* ty=Tensor[(5, 16), float32] */;
    %112 = multiply(%p28, %111) /* ty=Tensor[(5, 16), float32] */;
    mean(%112, axis=[1], keepdims=True) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 16), float32], Tensor[(5, 1), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %118 = %117(%116, %31, %29) /* ty=Tensor[(5, 1), float32] */;
  %119 = fn (%p034: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p117: Tensor[(5, 16), float32] /* ty=Tensor[(5, 16), float32] */, %p27: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p34: Tensor[(5, 2), float32] /* ty=Tensor[(5, 2), float32] */, Primitive=1, hash="77646be3493fd69c") -> Tensor[(5, 18), float32] {
    %106 = multiply(%p034, %p117) /* ty=Tensor[(5, 16), float32] */;
    %107 = abs(%p27) /* ty=Tensor[(5, 1), float32] */;
    %108 = ceil(%106) /* ty=Tensor[(5, 16), float32] */;
    %109 = add(%p34, %107) /* ty=Tensor[(5, 2), float32] */;
    %110 = (%108, %109) /* ty=(Tensor[(5, 16), float32], Tensor[(5, 2), float32]) span=from_string:49:21 */;
    concatenate(%110, axis=1) /* ty=Tensor[(5, 18), float32] */
  } /* ty=fn (Tensor[(5, 1), float32], Tensor[(5, 16), float32], Tensor[(5, 1), float32], Tensor[(5, 2), float32]) -> Tensor[(5, 18), float32] */;
  %120 = %119(%118, %116, %34, %43) /* ty=Tensor[(5, 18), float32] */;
  %121 = fn (%p038: Tensor[(5, 18), float32] /* ty=Tensor[(5, 18), float32] */, Primitive=1, hash="9f3c54f2dbe1de75") -> Tensor[(5, 1), float32] {
    mean(%p038, axis=[1], keepdims=True) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 18), float32]) -> Tensor[(5, 1), float32] */;
  %122 = %121(%120) /* ty=Tensor[(5, 1), float32] */;
  %123 = fn (%p039: Tensor[(5, 18), float32] /* ty=Tensor[(5, 18), float32] */, %p120: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="84238a93473bb8c5") -> Tensor[(5, 1), float32] {
    variance(%p039, %p120, axis=[1], keepdims=True) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 18), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %124 = %123(%120, %122) /* ty=Tensor[(5, 1), float32] */;
  %125 = fn (%p033: Tensor[(5, 18), float32] /* ty=Tensor[(5, 18), float32] */, %p116: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p26: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="531624635599ba9a") -> Tensor[(5, 18), float32] {
    %102 = add(%p26, 1e-05f /* ty=float32 */) /* ty=Tensor[(5, 1), float32] */;
    %103 = subtract(%p033, %p116) /* ty=Tensor[(5, 18), float32] */;
    %104 = sqrt(%102) /* ty=Tensor[(5, 1), float32] */;
    %105 = divide(%103, %104) /* ty=Tensor[(5, 18), float32] */;
    fast_exp(%105) /* ty=Tensor[(5, 18), float32] */
  } /* ty=fn (Tensor[(5, 18), float32], Tensor[(5, 1), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 18), float32] */;
  %126 = %125(%120, %122, %124) /* ty=Tensor[(5, 18), float32] */;
  %127 = fn (%p032: Tensor[(5, 18), float32] /* ty=Tensor[(5, 18), float32] */, Primitive=1, hash="d27aeac991cea51b") -> Tensor[(5, 18), float32] {
    nn.fast_softmax(%p032, axis=1) /* ty=Tensor[(5, 18), float32] */
  } /* ty=fn (Tensor[(5, 18), float32]) -> Tensor[(5, 18), float32] */;
  %128 = %57(%55, %56) /* ty=Tensor[(5, 10), float32] */;
  %129 = %77(%72, %74, %76, %x6, %x7, %40) /* ty=Tensor[(5, 2), float32] */;
  %130 = %101(%96, %98, %100, %x16) /* ty=Tensor[(5, 5), float32] */;
  %131 = %127(%126) /* ty=Tensor[(5, 18), float32] */;
  (%128, %129, %130, %131) /* ty=(Tensor[(5, 10), float32], Tensor[(5, 2), float32], Tensor[(5, 5), float32], Tensor[(5, 18), float32]) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.attrs.DensePackAttrs", 
        "VirtualDevice"
      ], 
      "data": [2, 9]
    }, 
    {
      "type_key": "Array", 
      "data": [3, 5, 7]
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "4"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC5n"
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "6"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC5n"
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "8"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC8n"
    }, 
    {
      "type_key": "Array", 
      "data": [10]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "22", 
        "target": "11", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "18", 
        "features": "20", 
        "host": "21", 
        "keys": "17", 
        "kind": "12", 
        "tag": "16"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "14", 
        "name": "13"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [15]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [15]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [19]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "18", 
        "features": "20", 
        "host": "0", 
        "keys": "17", 
        "kind": "12", 
        "tag": "16"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.16.0"}
}
#[version = "0.0.5"]
def @main(%pzx : Tensor[(64), float32] /* ty=Tensor[(64), float32] span=from_string:3:90 */, %px1 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:9:26 */, %px2 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:9:32 */, %px3 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:9:38 */, %px4 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:9:44 */, %px5 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:14:28 */, %px6 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:14:34 */, %px7 : Tensor[(4, 1), float32] /* ty=Tensor[(4, 1), float32] span=from_string:15:23 */, hash="78dcbbdc78e4b5da", src_layout="NC", dst_layout="NC4n", ) -> (Tensor[(64, 4, 1), float32],) {
  %21 = fn (%p03: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p11: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p2: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p3: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %p4: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p5: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="51f5f35e9873b337") -> Tensor[(64, 1), float32] {
    %8 = add(%p03, %p11) /* ty=Tensor[(64), float32] */;
    %9 = multiply(%p2, %8) /* ty=Tensor[(64), float32] */;
    %10 = add(%9, %p3) /* ty=Tensor[(64), float32] */;
    %11 = fast_tanh(%10) /* ty=Tensor[(64), float32] */;
    %12 = tan(%11) /* ty=Tensor[(64), float32] */;
    %13 = add(%p4, 1e-05f /* ty=float32 */) /* ty=Tensor[(1), float32] */;
    %14 = sqrt(%13) /* ty=Tensor[(1), float32] */;
    %15 = reshape(%12, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] */;
    %16 = divide(1f /* ty=float32 */, %14) /* ty=Tensor[(1), float32] */;
    %17 = negative(%p5) /* ty=Tensor[(1), float32] */;
    %18 = multiply(%15, %16) /* ty=Tensor[(64, 1), float32] */;
    %19 = multiply(%17, %16) /* ty=Tensor[(1), float32] */;
    %20 = add(%18, %19) /* ty=Tensor[(64, 1), float32] */;
    add(%20, %20) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(1), float32], Tensor[(1), float32]) -> Tensor[(64, 1), float32] */;
  %28 = %21(meta[relay.Constant][0] /* ty=Tensor[(64), float32] span=from_string:3:17 */, %pzx, meta[relay.Constant][1] /* ty=Tensor[(64), float32] span=from_string:4:23 */, meta[relay.Constant][2] /* ty=Tensor[(64), float32] span=from_string:5:21 */, %px4, %px3) /* ty=Tensor[(64, 1), float32] */;
  %29 = fn (%p07: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="c27dcf9f31d7b334") -> Tensor[(64, 1, 1), float32] {
    %27 = abs(%p07) /* ty=Tensor[(64, 1), float32] */;
    reshape(%27, newshape=[64, 1, 1]) /* ty=Tensor[(64, 1, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32]) -> Tensor[(64, 1, 1), float32] */;
  %30 = %29(%28) /* ty=Tensor[(64, 1, 1), float32] */;
  %31 = fn (%p08: Tensor[(64, 1, 1), float32] /* ty=Tensor[(64, 1, 1), float32] */, Primitive=1, hash="d913b62ab82093a5") -> Tensor[(64, 1, 1), float32] {
    mean(%p08, axis=[2], keepdims=True) /* ty=Tensor[(64, 1, 1), float32] */
  } /* ty=fn (Tensor[(64, 1, 1), float32]) -> Tensor[(64, 1, 1), float32] */;
  %32 = %31(%30) /* ty=Tensor[(64, 1, 1), float32] */;
  %33 = fn (%p09: Tensor[(64, 1, 1), float32] /* ty=Tensor[(64, 1, 1), float32] */, %p14: Tensor[(64, 1, 1), float32] /* ty=Tensor[(64, 1, 1), float32] */, Primitive=1, hash="2a9d25db1ca1034e") -> Tensor[(64, 1, 1), float32] {
    variance(%p09, %p14, axis=[2], keepdims=True) /* ty=Tensor[(64, 1, 1), float32] */
  } /* ty=fn (Tensor[(64, 1, 1), float32], Tensor[(64, 1, 1), float32]) -> Tensor[(64, 1, 1), float32] */;
  %34 = %33(%30, %32) /* ty=Tensor[(64, 1, 1), float32] */;
  %35 = fn (%p06: Tensor[(64, 1, 1), float32] /* ty=Tensor[(64, 1, 1), float32] */, %p13: Tensor[(64, 1, 1), float32] /* ty=Tensor[(64, 1, 1), float32] */, %p21: Tensor[(64, 1, 1), float32] /* ty=Tensor[(64, 1, 1), float32] */, Primitive=1, hash="cabcc7090b30b1e9") -> Tensor[(64, 1), float32] {
    %23 = add(%p21, 1e-05f /* ty=float32 */) /* ty=Tensor[(64, 1, 1), float32] */;
    %24 = subtract(%p06, %p13) /* ty=Tensor[(64, 1, 1), float32] */;
    %25 = sqrt(%23) /* ty=Tensor[(64, 1, 1), float32] */;
    %26 = divide(%24, %25) /* ty=Tensor[(64, 1, 1), float32] */;
    reshape(%26, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1, 1), float32], Tensor[(64, 1, 1), float32], Tensor[(64, 1, 1), float32]) -> Tensor[(64, 1), float32] */;
  %36 = fn (%p010: Tensor[(4, 1), float32] /* ty=Tensor[(4, 1), float32] */, Primitive=1, hash="b3624459cc57386e", src_layout="NC", dst_layout="NC4n") -> Tensor[(1, 1, 4), float32] {
    layout_transform(%p010, src_layout="NC", dst_layout="NC4n") /* ty=Tensor[(1, 1, 4), float32] */
  } /* ty=fn (Tensor[(4, 1), float32]) -> Tensor[(1, 1, 4), float32] */;
  %37 = %35(%30, %32, %34) /* ty=Tensor[(64, 1), float32] */;
  %38 = %36(%px7) /* ty=Tensor[(1, 1, 4), float32] */;
  %39 = fn (%p05: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p12: Tensor[(1, 1, 4), float32] /* ty=Tensor[(1, 1, 4), float32] */, Primitive=1, hash="64574c1b7b1f0df1", weight_layout="NC4n") -> Tensor[(64, 4), float32] {
    %22 = nn.contrib_dense_pack(%p05, %p12, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(64, 4), float32] */;
    nn.relu(%22) /* ty=Tensor[(64, 4), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(1, 1, 4), float32]) -> Tensor[(64, 4), float32] */;
  %40 = %39(%37, %38) /* ty=Tensor[(64, 4), float32] */;
  %41 = fn (%p04: Tensor[(64, 4), float32] /* ty=Tensor[(64, 4), float32] */, Primitive=1, hash="cd2795e6be7c7eda") -> Tensor[(64, 1), float32] {
    mean(%p04, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 4), float32]) -> Tensor[(64, 1), float32] */;
  %42 = %41(%40) /* ty=Tensor[(64, 1), float32] */;
  %43 = fn (%p02: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p1: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="5d5849ccfb511a80") -> Tensor[(64, 1), float32] {
    %3 = nn.leaky_relu(%p02, alpha=0.083677f) /* ty=Tensor[(64, 1), float32] */;
    %4 = ceil(%3) /* ty=Tensor[(64, 1), float32] */;
    %5 = multiply(%4, %p1) /* ty=Tensor[(64, 1), float32] */;
    %6 = nn.leaky_relu(%5, alpha=0.55317f) /* ty=Tensor[(64, 1), float32] */;
    %7 = negative(%6) /* ty=Tensor[(64, 1), float32] */;
    reshape(%7, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %44 = %43(%28, %42) /* ty=Tensor[(64, 1), float32] */;
  %45 = fn (%p01: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="e8f40fc2cc1d08c3") -> Tensor[(64, 1), float32] {
    nn.fast_softmax(%p01, axis=1) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %46 = %45(%44) /* ty=Tensor[(64, 1), float32] */;
  %47 = fn (%p0: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="c66044eb384e20f7") -> Tensor[(64, 4, 1), float32] {
    %0 = expand_dims(%p0, axis=1) /* ty=Tensor[(64, 1, 1), float32] */;
    %1 = fast_tanh(%0) /* ty=Tensor[(64, 1, 1), float32] */;
    %2 = (%1, %1, %0, %0) /* ty=(Tensor[(64, 1, 1), float32], Tensor[(64, 1, 1), float32], Tensor[(64, 1, 1), float32], Tensor[(64, 1, 1), float32]) span=from_string:27:21 */;
    concatenate(%2, axis=1) /* ty=Tensor[(64, 4, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32]) -> Tensor[(64, 4, 1), float32] */;
  %48 = %47(%46) /* ty=Tensor[(64, 4, 1), float32] */;
  (%48,) /* ty=(Tensor[(64, 4, 1), float32],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.attrs.DensePackAttrs", 
        "relay.Constant", 
        "VirtualDevice"
      ], 
      "data": [2, 5, 24]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "4"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC4n"
    }, 
    {
      "type_key": "Array", 
      "data": [6, 14, 19]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "11", 
        "data": "0", 
        "span": "9", 
        "virtual_device_": "7"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "8", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "17", 
        "end_column": "35", 
        "end_line": "3", 
        "line": "3", 
        "source_name": "10"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "12", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [13]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "16", 
        "data": "1", 
        "span": "15", 
        "virtual_device_": "7"
      }
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "23", 
        "end_column": "41", 
        "end_line": "4", 
        "line": "4", 
        "source_name": "10"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "17", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [18]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "21", 
        "data": "2", 
        "span": "20", 
        "virtual_device_": "7"
      }
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "21", 
        "end_column": "39", 
        "end_line": "5", 
        "line": "5", 
        "source_name": "10"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "22", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [23]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [25]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "37", 
        "target": "26", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "33", 
        "features": "35", 
        "host": "36", 
        "keys": "32", 
        "kind": "27", 
        "tag": "31"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "29", 
        "name": "28"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [30]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [30]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [34]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "33", 
        "features": "35", 
        "host": "0", 
        "keys": "32", 
        "kind": "27", 
        "tag": "31"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAAykikPrfLnz1FD4k90d+qPvGw/jzlKNg8Az5XPmUSJD8lEGY/sFsDP1KQbT9Jw3w/dtv9PgUsnD1D2nw/2Ps8PTHIVT8dvxY/IkuPPrBd8D7I4WM/vH95PkqGpz1/8LE+BGonPx0xXD9Kjvk+NjJCP6Y+4T2h9yE/8e8vPuyheD9Vwl0+pbanPkYIvTyqMb0+udTLPgLLLD/4XQU+Vg3APRVJsT04/sc+tb1sP/RGCD8yCg8/jPRgPz7fzT7jhlQ/ptq7Pt2VTz5XJXk+YtURP7qZ+j4I8DE/VHpPP0rhaj4x7B0/ywQPPzSh2z5V9sc+ufYkPuW29z2wQ649FDqePg==", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAArukZP7DrMz8hZxc/tisrPxfYoz31zxQ/K8tWPw1nDz+9RNw+5qFBP2YCSz4EfM4+4r+SPm5dyT7hKZc+2vUjPwJJgTtcom0/zKtbP/ZXCD/l4Dk/yZ6hPVn2nD74kUQ+xd6vPkVb+j7HvAo+e2CcPrXtej/h9e8+rIswPxolFj8DVEs/9rUeP9fpQz42IlI+114wPtx68z5N0cw+6Ts9P8OyGD/W2CU/vwqKPijNBz8Ns04+rhGpPi+8Kj30lZA+F9k6P1oXSj+AzYo+zRCNPReYgjwjoVc/+m6IPoMYRj+IjRc+c5jlPVhpkz4S5KI82EROPvDn/z62GDY/BRzCPQ==", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQBAAAAAAAAAAAABAAAAAAAA4aZQP/E9cD7nFgU/P6NrP5WOWj82yU0/huZkP9aVyz6r6dc+8D4qP9/wHz+ACHA/9o50PsaKxj7ixNw7POhxPeZJYD5wTtA+A1ZuP0dfAj+anMM9RuylPgc+sT5jWqU+dOB6P1Z97D5LmKE+XcHnPch0vz6lItE9/h9OPyAJGD8/xQ4+zTetPb/QWj+Ek2o+NoI8Py5DVz9sxVI/kcl3PtLZJT/UFRg/KwdhP0wqNj5n5GA/ZoXlPletOD+mMjs/583aPr2gLT2KEak+SlOfPqGsQz/cDU4/VgOhPlAEIj/E04A+W+sNPzNR9T7swl8/67o/P8DPxj5tSME923RWPw=="
  ], 
  "attrs": {"tvm_version": "0.16.0"}
}
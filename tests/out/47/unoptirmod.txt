#[version = "0.0.5"]
def @main(%x0 : Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] span=from_string:10:16 */, %x1 : Tensor[(15), float32] /* ty=Tensor[(15), float32] span=from_string:3:22 */, %x2 : Tensor[(15), float32] /* ty=Tensor[(15), float32] span=from_string:5:26 */, %x3 : Tensor[(15), float32] /* ty=Tensor[(15), float32] span=from_string:5:31 */, %x4 : Tensor[(15), float32] /* ty=Tensor[(15), float32] span=from_string:16:27 */, %x5 : Tensor[(15), float32] /* ty=Tensor[(15), float32] span=from_string:16:32 */, %x6 : Tensor[(15), float32] /* ty=Tensor[(15), float32] span=from_string:16:37 */, %x7 : Tensor[(15), float32] /* ty=Tensor[(15), float32] span=from_string:16:42 */, hash="27d06cc5b984a1cf", ) -> (Tensor[(12, 15), float32],) {
  %18 = fn (%p05: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p13: Tensor[(15), float32] /* ty=Tensor[(15), float32] */, Primitive=1, hash="d989adbffd5282c4") -> Tensor[(12, 15), float32] {
    nn.prelu(%p05, %p13) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32], Tensor[(15), float32]) -> Tensor[(12, 15), float32] */;
  %19 = %18(%x0, %x1) /* ty=Tensor[(12, 15), float32] */;
  %20 = fn (%p04: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="9950a75a21789600") -> Tensor[(12, 15), float32] {
    transpose(%p04, axes=[0, 1]) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32]) -> Tensor[(12, 15), float32] */;
  %21 = %20(%19) /* ty=Tensor[(12, 15), float32] */;
  %22 = fn (%p06: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="1647f79e86d1ae32") -> Tensor[(12, 1), float32] {
    mean(%p06, axis=[1], keepdims=True) /* ty=Tensor[(12, 1), float32] */
  } /* ty=fn (Tensor[(12, 15), float32]) -> Tensor[(12, 1), float32] */;
  %23 = %22(%21) /* ty=Tensor[(12, 1), float32] */;
  %24 = fn (%p07: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p14: Tensor[(12, 1), float32] /* ty=Tensor[(12, 1), float32] */, Primitive=1, hash="0927e4e2ac98f1ac") -> Tensor[(12, 1), float32] {
    variance(%p07, %p14, axis=[1], keepdims=True) /* ty=Tensor[(12, 1), float32] */
  } /* ty=fn (Tensor[(12, 15), float32], Tensor[(12, 1), float32]) -> Tensor[(12, 1), float32] */;
  %25 = %24(%21, %23) /* ty=Tensor[(12, 1), float32] */;
  %26 = fn (%p03: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p12: Tensor[(12, 1), float32] /* ty=Tensor[(12, 1), float32] */, %p22: Tensor[(12, 1), float32] /* ty=Tensor[(12, 1), float32] */, %p3: Tensor[(15), float32] /* ty=Tensor[(15), float32] */, Primitive=1, hash="1b10e47def535d64") -> Tensor[(12, 15), float32] {
    %12 = add(%p22, 1e-05f /* ty=float32 */) /* ty=Tensor[(12, 1), float32] */;
    %13 = subtract(%p03, %p12) /* ty=Tensor[(12, 15), float32] */;
    %14 = sqrt(%12) /* ty=Tensor[(12, 1), float32] */;
    %15 = divide(%13, %14) /* ty=Tensor[(12, 15), float32] */;
    %16 = multiply(%15, %p3) /* ty=Tensor[(12, 15), float32] */;
    %17 = ceil(%16) /* ty=Tensor[(12, 15), float32] */;
    exp(%17) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32], Tensor[(12, 1), float32], Tensor[(12, 1), float32], Tensor[(15), float32]) -> Tensor[(12, 15), float32] */;
  %27 = %26(%21, %23, %25, %x2) /* ty=Tensor[(12, 15), float32] */;
  %28 = fn (%p02: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="a38d7de1e9560a77") -> Tensor[(12, 15), float32] {
    round(%p02) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32]) -> Tensor[(12, 15), float32] */;
  %29 = %28(%27) /* ty=Tensor[(12, 15), float32] */;
  %30 = fn (%p01: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p11: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p21: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="7d60bd41ccf01389") -> Tensor[(12, 15), float32] {
    %11 = multiply(%p01, %p11) /* ty=Tensor[(12, 15), float32] */;
    add(%11, %p21) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32], Tensor[(12, 15), float32], Tensor[(12, 15), float32]) -> Tensor[(12, 15), float32] */;
  %31 = %30(%29, %19, %x0) /* ty=Tensor[(12, 15), float32] */;
  %32 = fn (%p08: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="b723dc6813407533") -> Tensor[(12, 15), float32] {
    cos(%p08) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32]) -> Tensor[(12, 15), float32] */;
  %47 = %32(%31) /* ty=Tensor[(12, 15), float32] */;
  %48 = fn (%p012: Tensor[(15), float32] /* ty=Tensor[(15), float32] */, %p15: Tensor[(15), float32] /* ty=Tensor[(15), float32] */, %p23: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p31: Tensor[(15), float32] /* ty=Tensor[(15), float32] */, %p4: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p5: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="4e5227cbbbfb60eb") -> Tensor[(12, 45), float32] {
    %37 = add(%p012, 1e-05f /* ty=float32 */) /* ty=Tensor[(15), float32] */;
    %38 = sqrt(%37) /* ty=Tensor[(15), float32] */;
    %39 = divide(1f /* ty=float32 */, %38) /* ty=Tensor[(15), float32] */;
    %40 = multiply(%39, %p15) /* ty=Tensor[(15), float32] */;
    %41 = negative(%p31) /* ty=Tensor[(15), float32] */;
    %42 = multiply(%p23, %40) /* ty=Tensor[(12, 15), float32] */;
    %43 = multiply(%41, %40) /* ty=Tensor[(15), float32] */;
    %44 = add(%42, %43) /* ty=Tensor[(12, 15), float32] */;
    %45 = nn.relu(%44) /* ty=Tensor[(12, 15), float32] */;
    %46 = (%p4, %p5, %45) /* ty=(Tensor[(12, 15), float32], Tensor[(12, 15), float32], Tensor[(12, 15), float32]) span=from_string:21:21 */;
    concatenate(%46, axis=1) /* ty=Tensor[(12, 45), float32] */
  } /* ty=fn (Tensor[(15), float32], Tensor[(15), float32], Tensor[(12, 15), float32], Tensor[(15), float32], Tensor[(12, 15), float32], Tensor[(12, 15), float32]) -> Tensor[(12, 45), float32] */;
  %49 = %48(%x7, %x4, %27, %x6, %29, %47) /* ty=Tensor[(12, 45), float32] */;
  %50 = fn (%p011: Tensor[(12, 45), float32] /* ty=Tensor[(12, 45), float32] */, Primitive=1, hash="f24b43e53a85259d") -> Tensor[(12, 45), float32] {
    nn.softmax(%p011, axis=1) /* ty=Tensor[(12, 45), float32] */
  } /* ty=fn (Tensor[(12, 45), float32]) -> Tensor[(12, 45), float32] */;
  %51 = %50(%49) /* ty=Tensor[(12, 45), float32] */;
  %52 = fn (%p010: Tensor[(12, 45), float32] /* ty=Tensor[(12, 45), float32] */, Primitive=1, hash="1460d084d1eef255") -> Tensor[(12, 45), float32] {
    %33 = nn.softmax(%p010, axis=1) /* ty=Tensor[(12, 45), float32] */;
    %34 = nn.relu(%33) /* ty=Tensor[(12, 45), float32] */;
    %35 = sin(%34) /* ty=Tensor[(12, 45), float32] */;
    %36 = tan(%35) /* ty=Tensor[(12, 45), float32] */;
    tanh(%36) /* ty=Tensor[(12, 45), float32] */
  } /* ty=fn (Tensor[(12, 45), float32]) -> Tensor[(12, 45), float32] */;
  %53 = %52(%51) /* ty=Tensor[(12, 45), float32] */;
  %54 = fn (%p09: Tensor[(12, 45), float32] /* ty=Tensor[(12, 45), float32] */, Primitive=1, hash="b9c53e06b67fe57d") -> Tensor[(12, 1), float32] {
    max(%p09, axis=[1], keepdims=True) /* ty=Tensor[(12, 1), float32] */
  } /* ty=fn (Tensor[(12, 45), float32]) -> Tensor[(12, 1), float32] */;
  %55 = %54(%53) /* ty=Tensor[(12, 1), float32] */;
  %56 = fn (%p0: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p1: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p2: Tensor[(12, 1), float32] /* ty=Tensor[(12, 1), float32] */, Primitive=1, hash="9348eda6579d7a14") -> Tensor[(12, 15), float32] {
    %0 = (%p0,) /* ty=(Tensor[(12, 15), float32],) span=from_string:12:20 */;
    %1 = concatenate(%0, axis=1) /* ty=Tensor[(12, 15), float32] */;
    %2 = tan(%1) /* ty=Tensor[(12, 15), float32] */;
    %3 = sin(%2) /* ty=Tensor[(12, 15), float32] */;
    %4 = exp(%3) /* ty=Tensor[(12, 15), float32] */;
    %5 = subtract(%p1, %p2) /* ty=Tensor[(12, 15), float32] */;
    %6 = nn.batch_flatten(%4) /* ty=Tensor[(12, 15), float32] */;
    %7 = divide(%5, %p2) /* ty=Tensor[(12, 15), float32] */;
    %8 = divide(%6, %7) /* ty=Tensor[(12, 15), float32] */;
    %9 = exp(%8) /* ty=Tensor[(12, 15), float32] */;
    %10 = reshape(%9, newshape=[12, 15]) /* ty=Tensor[(12, 15), float32] */;
    multiply(%9, %10) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32], Tensor[(12, 15), float32], Tensor[(12, 1), float32]) -> Tensor[(12, 15), float32] */;
  %57 = %56(%31, %47, %55) /* ty=Tensor[(12, 15), float32] */;
  (%57,) /* ty=(Tensor[(12, 15), float32],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "VirtualDevice"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "15", 
        "target": "4", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "14", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "7", 
        "name": "6"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [12]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "0", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.16.0"}
}
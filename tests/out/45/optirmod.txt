#[version = "0.0.5"]
def @main(%x0 : Tensor[(15, 15), float16] /* ty=Tensor[(15, 15), float16] span=from_string:15:26 */, %x1 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:5:26 */, %x2 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:5:31 */, %x3 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:7:21 */, %x4 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:8:26 */, %x5 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:8:31 */, %x6 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:9:26 */, %x7 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:9:31 */, %x8 : Tensor[(9, 60), float16] /* ty=Tensor[(9, 60), float16] span=from_string:19:23 */, %x9 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:25:26 */, %x10 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:29:28 */, %x11 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:29:34 */, %x12 : Tensor[(15), float16] /* ty=Tensor[(15), float16] span=from_string:27:26 */, hash="da39b4b43fed0844", ) -> (Tensor[(15, 15, 4), float16],) {
  %33 = fn (%p013: Tensor[(15, 15), float16] /* ty=Tensor[(15, 15), float16] */, Primitive=1, hash="80a31990151ae094") -> Tensor[(15, 15), float16] {
    negative(%p013) /* ty=Tensor[(15, 15), float16] */
  } /* ty=fn (Tensor[(15, 15), float16]) -> Tensor[(15, 15), float16] */;
  %34 = %33(%x0) /* ty=Tensor[(15, 15), float16] */;
  %35 = fn (%p012: Tensor[(15, 15), float16] /* ty=Tensor[(15, 15), float16] */, Primitive=1, hash="da64ad979af45f03") -> Tensor[(15, 15), float16] {
    floor(%p012) /* ty=Tensor[(15, 15), float16] */
  } /* ty=fn (Tensor[(15, 15), float16]) -> Tensor[(15, 15), float16] */;
  %36 = %35(%34) /* ty=Tensor[(15, 15), float16] */;
  %37 = fn (%p014: Tensor[(15, 15), float16] /* ty=Tensor[(15, 15), float16] */, Primitive=1, hash="e2b26b18d0a53ed9") -> Tensor[(15, 1), float16] {
    mean(%p014, axis=[1], keepdims=True) /* ty=Tensor[(15, 1), float16] */
  } /* ty=fn (Tensor[(15, 15), float16]) -> Tensor[(15, 1), float16] */;
  %38 = %37(%36) /* ty=Tensor[(15, 1), float16] */;
  %39 = fn (%p015: Tensor[(15, 15), float16] /* ty=Tensor[(15, 15), float16] */, %p18: Tensor[(15, 1), float16] /* ty=Tensor[(15, 1), float16] */, Primitive=1, hash="82fbc9df7cbdbd98") -> Tensor[(15, 1), float16] {
    variance(%p015, %p18, axis=[1], keepdims=True) /* ty=Tensor[(15, 1), float16] */
  } /* ty=fn (Tensor[(15, 15), float16], Tensor[(15, 1), float16]) -> Tensor[(15, 1), float16] */;
  %40 = %39(%36, %38) /* ty=Tensor[(15, 1), float16] */;
  %41 = fn (%p011: Tensor[(15, 15), float16] /* ty=Tensor[(15, 15), float16] */, %p17: Tensor[(15, 1), float16] /* ty=Tensor[(15, 1), float16] */, %p23: Tensor[(15, 1), float16] /* ty=Tensor[(15, 1), float16] */, %p33: float16 /* ty=float16 */, %p43: Tensor[(15), float16] /* ty=Tensor[(15), float16] */, Primitive=1, hash="3a5346fcc30bec30") -> Tensor[(15, 15, 1), float16] {
    %28 = add(%p23, %p33) /* ty=Tensor[(15, 1), float16] */;
    %29 = subtract(%p011, %p17) /* ty=Tensor[(15, 15), float16] */;
    %30 = sqrt(%28) /* ty=Tensor[(15, 1), float16] */;
    %31 = divide(%29, %30) /* ty=Tensor[(15, 15), float16] */;
    %32 = add(%31, %p43) /* ty=Tensor[(15, 15), float16] */;
    reshape(%32, newshape=[15, 15, 1]) /* ty=Tensor[(15, 15, 1), float16] */
  } /* ty=fn (Tensor[(15, 15), float16], Tensor[(15, 1), float16], Tensor[(15, 1), float16], float16, Tensor[(15), float16]) -> Tensor[(15, 15, 1), float16] */;
  %42 = %41(%36, %38, %40, 1.00136e-05f16 /* ty=float16 */, %x2) /* ty=Tensor[(15, 15, 1), float16] */;
  %43 = fn (%p010: Tensor[(15, 15, 1), float16] /* ty=Tensor[(15, 15, 1), float16] */, %p16: Tensor[(15), float16] /* ty=Tensor[(15), float16] */, Primitive=1, hash="7828440987fa8447") -> Tensor[(15, 5, 3, 1), float16] {
    %27 = nn.prelu(%p010, %p16) /* ty=Tensor[(15, 15, 1), float16] */;
    reshape(%27, newshape=[15, 5, 3, 1]) /* ty=Tensor[(15, 5, 3, 1), float16] */
  } /* ty=fn (Tensor[(15, 15, 1), float16], Tensor[(15), float16]) -> Tensor[(15, 5, 3, 1), float16] */;
  %44 = %43(%42, %x3) /* ty=Tensor[(15, 5, 3, 1), float16] */;
  %45 = fn (%p016: Tensor[(15, 5, 3, 1), float16] /* ty=Tensor[(15, 5, 3, 1), float16] */, Primitive=1, hash="0bfc841be25cc56d") -> Tensor[(15, 5, 1, 1), float16] {
    mean(%p016, axis=[2, 3], keepdims=True) /* ty=Tensor[(15, 5, 1, 1), float16] */
  } /* ty=fn (Tensor[(15, 5, 3, 1), float16]) -> Tensor[(15, 5, 1, 1), float16] */;
  %46 = %45(%44) /* ty=Tensor[(15, 5, 1, 1), float16] */;
  %47 = fn (%p017: Tensor[(15, 5, 3, 1), float16] /* ty=Tensor[(15, 5, 3, 1), float16] */, %p19: Tensor[(15, 5, 1, 1), float16] /* ty=Tensor[(15, 5, 1, 1), float16] */, Primitive=1, hash="d3eec871ffb6b8a4") -> Tensor[(15, 5, 1, 1), float16] {
    variance(%p017, %p19, axis=[2, 3], keepdims=True) /* ty=Tensor[(15, 5, 1, 1), float16] */
  } /* ty=fn (Tensor[(15, 5, 3, 1), float16], Tensor[(15, 5, 1, 1), float16]) -> Tensor[(15, 5, 1, 1), float16] */;
  %48 = %47(%44, %46) /* ty=Tensor[(15, 5, 1, 1), float16] */;
  %49 = fn (%p09: Tensor[(15, 5, 3, 1), float16] /* ty=Tensor[(15, 5, 3, 1), float16] */, %p15: Tensor[(15, 5, 1, 1), float16] /* ty=Tensor[(15, 5, 1, 1), float16] */, %p22: Tensor[(15, 5, 1, 1), float16] /* ty=Tensor[(15, 5, 1, 1), float16] */, %p32: float16 /* ty=float16 */, %p42: Tensor[(15), float16] /* ty=Tensor[(15), float16] */, Primitive=1, hash="6c4e30d5acbb7b57") -> Tensor[(15, 3, 5, 1), float16] {
    %20 = add(%p22, %p32) /* ty=Tensor[(15, 5, 1, 1), float16] */;
    %21 = subtract(%p09, %p15) /* ty=Tensor[(15, 5, 3, 1), float16] */;
    %22 = sqrt(%20) /* ty=Tensor[(15, 5, 1, 1), float16] */;
    %23 = divide(%21, %22) /* ty=Tensor[(15, 5, 3, 1), float16] */;
    %24 = reshape(%23, newshape=[15, 15, 1]) /* ty=Tensor[(15, 15, 1), float16] */;
    %25 = expand_dims(%p42, axis=1) /* ty=Tensor[(15, 1), float16] */;
    %26 = multiply(%24, %25) /* ty=Tensor[(15, 15, 1), float16] */;
    reshape(%26, newshape=[15, 3, 5, 1]) /* ty=Tensor[(15, 3, 5, 1), float16] */
  } /* ty=fn (Tensor[(15, 5, 3, 1), float16], Tensor[(15, 5, 1, 1), float16], Tensor[(15, 5, 1, 1), float16], float16, Tensor[(15), float16]) -> Tensor[(15, 3, 5, 1), float16] */;
  %50 = %49(%44, %46, %48, 1.00136e-05f16 /* ty=float16 */, %x4) /* ty=Tensor[(15, 3, 5, 1), float16] */;
  %51 = fn (%p018: Tensor[(15, 3, 5, 1), float16] /* ty=Tensor[(15, 3, 5, 1), float16] */, Primitive=1, hash="6af482fc341a03a0") -> Tensor[(15, 3, 1, 1), float16] {
    mean(%p018, axis=[2, 3], keepdims=True) /* ty=Tensor[(15, 3, 1, 1), float16] */
  } /* ty=fn (Tensor[(15, 3, 5, 1), float16]) -> Tensor[(15, 3, 1, 1), float16] */;
  %52 = %51(%50) /* ty=Tensor[(15, 3, 1, 1), float16] */;
  %53 = fn (%p019: Tensor[(15, 3, 5, 1), float16] /* ty=Tensor[(15, 3, 5, 1), float16] */, %p110: Tensor[(15, 3, 1, 1), float16] /* ty=Tensor[(15, 3, 1, 1), float16] */, Primitive=1, hash="72f1763b9fbc2523") -> Tensor[(15, 3, 1, 1), float16] {
    variance(%p019, %p110, axis=[2, 3], keepdims=True) /* ty=Tensor[(15, 3, 1, 1), float16] */
  } /* ty=fn (Tensor[(15, 3, 5, 1), float16], Tensor[(15, 3, 1, 1), float16]) -> Tensor[(15, 3, 1, 1), float16] */;
  %54 = %53(%50, %52) /* ty=Tensor[(15, 3, 1, 1), float16] */;
  %55 = fn (%p08: Tensor[(15, 3, 5, 1), float16] /* ty=Tensor[(15, 3, 5, 1), float16] */, %p14: Tensor[(15, 3, 1, 1), float16] /* ty=Tensor[(15, 3, 1, 1), float16] */, %p21: Tensor[(15, 3, 1, 1), float16] /* ty=Tensor[(15, 3, 1, 1), float16] */, %p31: float16 /* ty=float16 */, %p41: Tensor[(15), float16] /* ty=Tensor[(15), float16] */, Primitive=1, hash="70727eeecc3a28ab") -> Tensor[(15, 15, 1), float16] {
    %14 = add(%p21, %p31) /* ty=Tensor[(15, 3, 1, 1), float16] */;
    %15 = subtract(%p08, %p14) /* ty=Tensor[(15, 3, 5, 1), float16] */;
    %16 = sqrt(%14) /* ty=Tensor[(15, 3, 1, 1), float16] */;
    %17 = divide(%15, %16) /* ty=Tensor[(15, 3, 5, 1), float16] */;
    %18 = reshape(%17, newshape=[15, 15, 1]) /* ty=Tensor[(15, 15, 1), float16] */;
    %19 = expand_dims(%p41, axis=1) /* ty=Tensor[(15, 1), float16] */;
    multiply(%18, %19) /* ty=Tensor[(15, 15, 1), float16] */
  } /* ty=fn (Tensor[(15, 3, 5, 1), float16], Tensor[(15, 3, 1, 1), float16], Tensor[(15, 3, 1, 1), float16], float16, Tensor[(15), float16]) -> Tensor[(15, 15, 1), float16] */;
  %56 = %55(%50, %52, %54, 1.00136e-05f16 /* ty=float16 */, %x6) /* ty=Tensor[(15, 15, 1), float16] */;
  %57 = fn (%p07: Tensor[(15, 15, 1), float16] /* ty=Tensor[(15, 15, 1), float16] */, Primitive=1, hash="735c3f06001f7347", layout="NCW", out_layout="") -> Tensor[(15, 15, 1), float16] {
    %11 = nn.adaptive_avg_pool1d(%p07, output_size=[1]) /* ty=Tensor[(15, 15, 1), float16] */;
    %12 = floor(%11) /* ty=Tensor[(15, 15, 1), float16] */;
    %13 = nn.leaky_relu(%12, alpha=0.464638f) /* ty=Tensor[(15, 15, 1), float16] */;
    sin(%13) /* ty=Tensor[(15, 15, 1), float16] */
  } /* ty=fn (Tensor[(15, 15, 1), float16]) -> Tensor[(15, 15, 1), float16] */;
  %58 = %57(%56) /* ty=Tensor[(15, 15, 1), float16] */;
  %59 = fn (%p06: Tensor[(15, 15, 1), float16] /* ty=Tensor[(15, 15, 1), float16] */, Primitive=1, hash="89486808c1b80208") -> Tensor[(15, 15, 1), float16] {
    sum(%p06, axis=[2], keepdims=True) /* ty=Tensor[(15, 15, 1), float16] */
  } /* ty=fn (Tensor[(15, 15, 1), float16]) -> Tensor[(15, 15, 1), float16] */;
  %60 = %59(%58) /* ty=Tensor[(15, 15, 1), float16] */;
  %61 = fn (%p05: Tensor[(15, 15, 1), float16] /* ty=Tensor[(15, 15, 1), float16] */, Primitive=1, hash="cc8b18b2542f4b54") -> Tensor[(15, 15, 1), float16] {
    nn.fast_softmax(%p05, axis=1) /* ty=Tensor[(15, 15, 1), float16] */
  } /* ty=fn (Tensor[(15, 15, 1), float16]) -> Tensor[(15, 15, 1), float16] */;
  %66 = fn (%p021: Tensor[(15, 15), float16] /* ty=Tensor[(15, 15), float16] */, %p112: Tensor[(15, 15), float16] /* ty=Tensor[(15, 15), float16] */, %p24: Tensor[(15, 15), float16] /* ty=Tensor[(15, 15), float16] */, Primitive=1, hash="391a49d263cfbf97") -> Tensor[(15, 60), float16] {
    %63 = nn.batch_flatten(%p021) /* ty=Tensor[(15, 15), float16] */;
    %64 = (%63, %p112, %63, %p24) /* ty=(Tensor[(15, 15), float16], Tensor[(15, 15), float16], Tensor[(15, 15), float16], Tensor[(15, 15), float16]) span=from_string:17:21 */;
    %65 = concatenate(%64, axis=1) /* ty=Tensor[(15, 60), float16] */;
    add(%65, %65) /* ty=Tensor[(15, 60), float16] */
  } /* ty=fn (Tensor[(15, 15), float16], Tensor[(15, 15), float16], Tensor[(15, 15), float16]) -> Tensor[(15, 60), float16] */;
  %67 = fn (%p022: Tensor[(9, 60), float16] /* ty=Tensor[(9, 60), float16] */, Primitive=1, hash="63783db445e85e06", src_layout="NC", dst_layout="NC3n") -> Tensor[(3, 60, 3), float16] {
    layout_transform(%p022, src_layout="NC", dst_layout="NC3n") /* ty=Tensor[(3, 60, 3), float16] */
  } /* ty=fn (Tensor[(9, 60), float16]) -> Tensor[(3, 60, 3), float16] */;
  %68 = %66(%x0, %36, %34) /* ty=Tensor[(15, 60), float16] */;
  %69 = %67(%x8) /* ty=Tensor[(3, 60, 3), float16] */;
  %70 = fn (%p020: Tensor[(15, 60), float16] /* ty=Tensor[(15, 60), float16] */, %p111: Tensor[(3, 60, 3), float16] /* ty=Tensor[(3, 60, 3), float16] */, Primitive=1, hash="d4cef67c4a522cc7", weight_layout="NC3n") -> Tensor[(15, 9), float16] {
    %62 = nn.contrib_dense_pack(%p020, %p111, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(15, 9), float16] */;
    tan(%62) /* ty=Tensor[(15, 9), float16] */
  } /* ty=fn (Tensor[(15, 60), float16], Tensor[(3, 60, 3), float16]) -> Tensor[(15, 9), float16] */;
  %71 = %61(%60) /* ty=Tensor[(15, 15, 1), float16] */;
  %72 = %70(%68, %69) /* ty=Tensor[(15, 9), float16] */;
  %73 = fn (%p04: Tensor[(15, 15, 1), float16] /* ty=Tensor[(15, 15, 1), float16] */, %p13: Tensor[(15, 9), float16] /* ty=Tensor[(15, 9), float16] */, Primitive=1, hash="32788eaf25ea4ebe") -> Tensor[(15, 15, 9), float16] {
    %10 = multiply(%p04, %p13) /* ty=Tensor[(15, 15, 9), float16] */;
    abs(%10) /* ty=Tensor[(15, 15, 9), float16] */
  } /* ty=fn (Tensor[(15, 15, 1), float16], Tensor[(15, 9), float16]) -> Tensor[(15, 15, 9), float16] */;
  %74 = %73(%71, %72) /* ty=Tensor[(15, 15, 9), float16] */;
  %75 = fn (%p03: Tensor[(15, 15, 9), float16] /* ty=Tensor[(15, 15, 9), float16] */, Primitive=1, hash="5ae4b99ef4c5c0be", layout="NCW", out_layout="") -> Tensor[(15, 15, 4), float16] {
    nn.max_pool1d(%p03, pool_size=[3], strides=[2], dilation=[2], padding=[1, 2]) /* ty=Tensor[(15, 15, 4), float16] */
  } /* ty=fn (Tensor[(15, 15, 9), float16]) -> Tensor[(15, 15, 4), float16] */;
  %76 = %75(%74) /* ty=Tensor[(15, 15, 4), float16] */;
  %77 = fn (%p02: Tensor[(15), float16] /* ty=Tensor[(15), float16] */, %p12: Tensor[(15, 15, 4), float16] /* ty=Tensor[(15, 15, 4), float16] */, Primitive=1, hash="ea834c8ba121cae0") -> Tensor[(15, 15, 4), float16] {
    %8 = expand_dims(%p02, axis=1) /* ty=Tensor[(15, 1), float16] */;
    %9 = expand_dims(%8, axis=0) /* ty=Tensor[(1, 15, 1), float16] */;
    add(%p12, %9) /* ty=Tensor[(15, 15, 4), float16] */
  } /* ty=fn (Tensor[(15), float16], Tensor[(15, 15, 4), float16]) -> Tensor[(15, 15, 4), float16] */;
  %78 = %77(%x9, %76) /* ty=Tensor[(15, 15, 4), float16] */;
  %79 = fn (%p01: Tensor[(15, 15, 4), float16] /* ty=Tensor[(15, 15, 4), float16] */, %p11: Tensor[(15), float16] /* ty=Tensor[(15), float16] */, Primitive=1, hash="8d295ea1b7506b70") -> Tensor[(15, 15, 4), float16] {
    %5 = expand_dims(%p11, axis=1) /* ty=Tensor[(15, 1), float16] */;
    %6 = nn.leaky_relu(%p01, alpha=0.109335f) /* ty=Tensor[(15, 15, 4), float16] */;
    %7 = expand_dims(%5, axis=0) /* ty=Tensor[(1, 15, 1), float16] */;
    add(%6, %7) /* ty=Tensor[(15, 15, 4), float16] */
  } /* ty=fn (Tensor[(15, 15, 4), float16], Tensor[(15), float16]) -> Tensor[(15, 15, 4), float16] */;
  %85 = fn (%p024: Tensor[(15, 15, 4), float16] /* ty=Tensor[(15, 15, 4), float16] */, Primitive=1, hash="25b2e5c4aaff616a") -> Tensor[(15, 5, 3, 4), float16] {
    %84 = abs(%p024) /* ty=Tensor[(15, 15, 4), float16] */;
    reshape(%84, newshape=[15, 5, 3, 4]) /* ty=Tensor[(15, 5, 3, 4), float16] */
  } /* ty=fn (Tensor[(15, 15, 4), float16]) -> Tensor[(15, 5, 3, 4), float16] */;
  %86 = %85(%78) /* ty=Tensor[(15, 5, 3, 4), float16] */;
  %87 = fn (%p025: Tensor[(15, 5, 3, 4), float16] /* ty=Tensor[(15, 5, 3, 4), float16] */, Primitive=1, hash="ff2b588fe8896fd7") -> Tensor[(15, 5, 1, 1), float16] {
    mean(%p025, axis=[2, 3], keepdims=True) /* ty=Tensor[(15, 5, 1, 1), float16] */
  } /* ty=fn (Tensor[(15, 5, 3, 4), float16]) -> Tensor[(15, 5, 1, 1), float16] */;
  %88 = %87(%86) /* ty=Tensor[(15, 5, 1, 1), float16] */;
  %89 = fn (%p026: Tensor[(15, 5, 3, 4), float16] /* ty=Tensor[(15, 5, 3, 4), float16] */, %p114: Tensor[(15, 5, 1, 1), float16] /* ty=Tensor[(15, 5, 1, 1), float16] */, Primitive=1, hash="170c67e2b9a4e53e") -> Tensor[(15, 5, 1, 1), float16] {
    variance(%p026, %p114, axis=[2, 3], keepdims=True) /* ty=Tensor[(15, 5, 1, 1), float16] */
  } /* ty=fn (Tensor[(15, 5, 3, 4), float16], Tensor[(15, 5, 1, 1), float16]) -> Tensor[(15, 5, 1, 1), float16] */;
  %90 = %89(%86, %88) /* ty=Tensor[(15, 5, 1, 1), float16] */;
  %91 = fn (%p023: Tensor[(15, 5, 3, 4), float16] /* ty=Tensor[(15, 5, 3, 4), float16] */, %p113: Tensor[(15, 5, 1, 1), float16] /* ty=Tensor[(15, 5, 1, 1), float16] */, %p25: Tensor[(15, 5, 1, 1), float16] /* ty=Tensor[(15, 5, 1, 1), float16] */, %p34: float16 /* ty=float16 */, Primitive=1, hash="5bf27c2c8793e328") -> Tensor[(15, 15, 4), float16] {
    %80 = add(%p25, %p34) /* ty=Tensor[(15, 5, 1, 1), float16] */;
    %81 = subtract(%p023, %p113) /* ty=Tensor[(15, 5, 3, 4), float16] */;
    %82 = sqrt(%80) /* ty=Tensor[(15, 5, 1, 1), float16] */;
    %83 = divide(%81, %82) /* ty=Tensor[(15, 5, 3, 4), float16] */;
    reshape(%83, newshape=[15, 15, 4]) /* ty=Tensor[(15, 15, 4), float16] */
  } /* ty=fn (Tensor[(15, 5, 3, 4), float16], Tensor[(15, 5, 1, 1), float16], Tensor[(15, 5, 1, 1), float16], float16) -> Tensor[(15, 15, 4), float16] */;
  %92 = %79(%78, %x12) /* ty=Tensor[(15, 15, 4), float16] */;
  %93 = %91(%86, %88, %90, 1.00136e-05f16 /* ty=float16 */) /* ty=Tensor[(15, 15, 4), float16] */;
  %94 = fn (%p0: Tensor[(15, 15, 4), float16] /* ty=Tensor[(15, 15, 4), float16] */, %p1: Tensor[(15), float16] /* ty=Tensor[(15), float16] */, %p2: Tensor[(15, 15, 4), float16] /* ty=Tensor[(15, 15, 4), float16] */, %p3: Tensor[(15, 15, 1), float16] /* ty=Tensor[(15, 15, 1), float16] */, %p4: Tensor[(15, 15, 4), float16] /* ty=Tensor[(15, 15, 4), float16] */, Primitive=1, hash="3025b4733d33d06c") -> Tensor[(15, 15, 4), float16] {
    %0 = expand_dims(%p1, axis=1) /* ty=Tensor[(15, 1), float16] */;
    %1 = add(%p2, %0) /* ty=Tensor[(15, 15, 4), float16] */;
    %2 = nn.fast_softmax(%p0, axis=1) /* ty=Tensor[(15, 15, 4), float16] */;
    %3 = maximum(%p3, %1) /* ty=Tensor[(15, 15, 4), float16] */;
    %4 = add(%2, %3) /* ty=Tensor[(15, 15, 4), float16] */;
    add(%4, %p4) /* ty=Tensor[(15, 15, 4), float16] */
  } /* ty=fn (Tensor[(15, 15, 4), float16], Tensor[(15), float16], Tensor[(15, 15, 4), float16], Tensor[(15, 15, 1), float16], Tensor[(15, 15, 4), float16]) -> Tensor[(15, 15, 4), float16] */;
  %95 = %94(%92, %x11, %93, %42, %76) /* ty=Tensor[(15, 15, 4), float16] */;
  (%95,) /* ty=(Tensor[(15, 15, 4), float16],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.attrs.DensePackAttrs", 
        "VirtualDevice"
      ], 
      "data": [2, 5]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float16", 
        "units": "0", 
        "weight_layout": "4"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC3n"
    }, 
    {
      "type_key": "Array", 
      "data": [6]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "18", 
        "target": "7", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "14", 
        "features": "16", 
        "host": "17", 
        "keys": "13", 
        "kind": "8", 
        "tag": "12"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "10", 
        "name": "9"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [11]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [11]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [15]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "14", 
        "features": "16", 
        "host": "0", 
        "keys": "13", 
        "kind": "8", 
        "tag": "12"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.16.0"}
}
#[version = "0.0.5"]
def @main(%pzx : Tensor[(64, 4), float32] /* ty=Tensor[(64, 4), float32] span=from_string:3:17 */, %pzweight : Tensor[(3, 4), float32] /* ty=Tensor[(3, 4), float32] span=from_string:3:23 */, %pzin_bias : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:16 */, %px1 : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:7:26 */, %px2 : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:7:32 */, %px3 : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:7:38 */, %px4 : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:7:44 */, %px5 : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:9:26 */, %px6 : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:9:32 */, hash="cb58519e6206c76e", ) -> (Tensor[(64, 9), float32],) {
  %27 = fn (%p03: Tensor[(3, 4), float32] /* ty=Tensor[(3, 4), float32] */, %p12: Tensor[(3, 1), float32] /* ty=Tensor[(3, 1), float32] */, Primitive=1, hash="6311b209ee0e8190", src_layout="NC", dst_layout="NC3n") -> Tensor[(1, 4, 3), float32] {
    %26 = multiply(%p03, %p12) /* ty=Tensor[(3, 4), float32] */;
    layout_transform(%26, src_layout="NC", dst_layout="NC3n") /* ty=Tensor[(1, 4, 3), float32] */
  } /* ty=fn (Tensor[(3, 4), float32], Tensor[(3, 1), float32]) -> Tensor[(1, 4, 3), float32] */;
  %31 = fn (%p04: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p13: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, Primitive=1, hash="5e573744016ac88f") -> Tensor[(3), float32] {
    %28 = add(%p04, 1e-05f /* ty=float32 */) /* ty=Tensor[(3), float32] */;
    %29 = sqrt(%28) /* ty=Tensor[(3), float32] */;
    %30 = divide(1f /* ty=float32 */, %29) /* ty=Tensor[(3), float32] */;
    multiply(%30, %p13) /* ty=Tensor[(3), float32] */
  } /* ty=fn (Tensor[(3), float32], Tensor[(3), float32]) -> Tensor[(3), float32] */;
  %32 = %27(%pzweight, meta[relay.Constant][0] /* ty=Tensor[(3, 1), float32] */) /* ty=Tensor[(1, 4, 3), float32] */;
  %33 = %31(%px4, %px1) /* ty=Tensor[(3), float32] */;
  %34 = fn (%p02: Tensor[(64, 4), float32] /* ty=Tensor[(64, 4), float32] */, %p11: Tensor[(1, 4, 3), float32] /* ty=Tensor[(1, 4, 3), float32] */, %p21: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p31: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p41: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p5: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, Primitive=1, hash="b7f16405c1f1917b", weight_layout="NC3n") -> Tensor[(64, 3), float32] {
    %16 = multiply(%p21, %p31) /* ty=Tensor[(3), float32] */;
    %17 = nn.contrib_dense_pack(%p02, %p11, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(64, 3), float32] */;
    %18 = expand_dims(%16, axis=0) /* ty=Tensor[(1, 3), float32] */;
    %19 = add(%17, %18) /* ty=Tensor[(64, 3), float32] */;
    %20 = nn.relu(%19) /* ty=Tensor[(64, 3), float32] */;
    %21 = expand_dims(%p41, axis=0) /* ty=Tensor[(1, 3), float32] */;
    %22 = negative(%p5) /* ty=Tensor[(3), float32] */;
    %23 = multiply(%22, %p41) /* ty=Tensor[(3), float32] */;
    %24 = multiply(%20, %21) /* ty=Tensor[(64, 3), float32] */;
    %25 = expand_dims(%23, axis=0) /* ty=Tensor[(1, 3), float32] */;
    add(%24, %25) /* ty=Tensor[(64, 3), float32] */
  } /* ty=fn (Tensor[(64, 4), float32], Tensor[(1, 4, 3), float32], Tensor[(3), float32], Tensor[(3), float32], Tensor[(3), float32], Tensor[(3), float32]) -> Tensor[(64, 3), float32] */;
  %35 = %34(%pzx, %32, %pzin_bias, meta[relay.Constant][1] /* ty=Tensor[(3), float32] span=from_string:6:27 */, %33, %px3) /* ty=Tensor[(64, 3), float32] */;
  %36 = fn (%p01: Tensor[(64, 3), float32] /* ty=Tensor[(64, 3), float32] */, Primitive=1, relay.reshape_only=1, hash="22b9acc717c1b70b") -> Tensor[(64, 3, 1), float32] {
    reshape(%p01, newshape=[64, 3, 1]) /* ty=Tensor[(64, 3, 1), float32] */
  } /* ty=fn (Tensor[(64, 3), float32]) -> Tensor[(64, 3, 1), float32] */;
  %37 = %36(%35) /* ty=Tensor[(64, 3, 1), float32] */;
  %38 = fn (%p05: Tensor[(64, 3, 1), float32] /* ty=Tensor[(64, 3, 1), float32] */, Primitive=1, hash="69af805decc29730") -> Tensor[(64, 3, 1), float32] {
    mean(%p05, axis=[2], keepdims=True) /* ty=Tensor[(64, 3, 1), float32] */
  } /* ty=fn (Tensor[(64, 3, 1), float32]) -> Tensor[(64, 3, 1), float32] */;
  %39 = %38(%37) /* ty=Tensor[(64, 3, 1), float32] */;
  %40 = fn (%p06: Tensor[(64, 3, 1), float32] /* ty=Tensor[(64, 3, 1), float32] */, %p14: Tensor[(64, 3, 1), float32] /* ty=Tensor[(64, 3, 1), float32] */, Primitive=1, hash="f12187d56fbd9e5f") -> Tensor[(64, 3, 1), float32] {
    variance(%p06, %p14, axis=[2], keepdims=True) /* ty=Tensor[(64, 3, 1), float32] */
  } /* ty=fn (Tensor[(64, 3, 1), float32], Tensor[(64, 3, 1), float32]) -> Tensor[(64, 3, 1), float32] */;
  %41 = %40(%37, %39) /* ty=Tensor[(64, 3, 1), float32] */;
  %42 = fn (%p0: Tensor[(64, 3, 1), float32] /* ty=Tensor[(64, 3, 1), float32] */, %p1: Tensor[(64, 3, 1), float32] /* ty=Tensor[(64, 3, 1), float32] */, %p2: Tensor[(64, 3, 1), float32] /* ty=Tensor[(64, 3, 1), float32] */, %p3: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p4: Tensor[(64, 3), float32] /* ty=Tensor[(64, 3), float32] */, Primitive=1, hash="30b2a7478fedd3b7") -> Tensor[(64, 9), float32] {
    %0 = add(%p2, 1e-05f /* ty=float32 */) /* ty=Tensor[(64, 3, 1), float32] */;
    %1 = subtract(%p0, %p1) /* ty=Tensor[(64, 3, 1), float32] */;
    %2 = sqrt(%0) /* ty=Tensor[(64, 3, 1), float32] */;
    %3 = divide(%1, %2) /* ty=Tensor[(64, 3, 1), float32] */;
    %4 = reshape(%3, newshape=[64, 3]) /* ty=Tensor[(64, 3), float32] */;
    %5 = multiply(%4, %p3) /* ty=Tensor[(64, 3), float32] */;
    %6 = sigmoid(%5) /* ty=Tensor[(64, 3), float32] */;
    %7 = reshape(%6, newshape=[64, 3]) /* ty=Tensor[(64, 3), float32] */;
    %8 = tan(%7) /* ty=Tensor[(64, 3), float32] */;
    %9 = tan(%8) /* ty=Tensor[(64, 3), float32] */;
    %10 = split(%9, indices_or_sections=[1], axis=1) /* ty=(Tensor[(64, 1), float32], Tensor[(64, 2), float32]) */;
    %11 = tan(%6) /* ty=Tensor[(64, 3), float32] */;
    %12 = %10.1 /* ty=Tensor[(64, 2), float32] */;
    %13 = floor(%11) /* ty=Tensor[(64, 3), float32] */;
    %14 = %10.0 /* ty=Tensor[(64, 1), float32] */;
    %15 = (%12, %13, %p4, %14) /* ty=(Tensor[(64, 2), float32], Tensor[(64, 3), float32], Tensor[(64, 3), float32], Tensor[(64, 1), float32]) span=from_string:20:21 */;
    concatenate(%15, axis=1) /* ty=Tensor[(64, 9), float32] */
  } /* ty=fn (Tensor[(64, 3, 1), float32], Tensor[(64, 3, 1), float32], Tensor[(64, 3, 1), float32], Tensor[(3), float32], Tensor[(64, 3), float32]) -> Tensor[(64, 9), float32] */;
  %43 = %42(%37, %39, %41, %px5, %35) /* ty=Tensor[(64, 9), float32] */;
  (%43,) /* ty=(Tensor[(64, 9), float32],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant", 
        "relay.attrs.DensePackAttrs", 
        "VirtualDevice"
      ], 
      "data": [2, 18, 21]
    }, 
    {
      "type_key": "Array", 
      "data": [3, 10]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "6", 
        "data": "0", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "7", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [8, 9]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "3"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "15", 
        "data": "1", 
        "span": "13", 
        "virtual_device_": "11"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "12", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "27", 
        "end_column": "45", 
        "end_line": "6", 
        "line": "6", 
        "source_name": "14"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "16", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [17]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "3"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [19]
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "20"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC3n"
    }, 
    {
      "type_key": "Array", 
      "data": [22]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "34", 
        "target": "23", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "30", 
        "features": "32", 
        "host": "33", 
        "keys": "29", 
        "kind": "24", 
        "tag": "28"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "26", 
        "name": "25"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [27]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [27]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [31]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "30", 
        "features": "32", 
        "host": "0", 
        "keys": "29", 
        "kind": "24", 
        "tag": "28"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAgAAAAIgAQADAAAAAAAAAAEAAAAAAAAADAAAAAAAAADOwDs/O7QtPwEPST8=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQADAAAAAAAAAAwAAAAAAAAAzsA7Pzu0LT8BD0k/"
  ], 
  "attrs": {"tvm_version": "0.16.0"}
}
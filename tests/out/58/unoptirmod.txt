#[version = "0.0.5"]
def @main(%x0 : Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] span=from_string:35:14 */, %x1 : Tensor[(10, 15), float32] /* ty=Tensor[(10, 15), float32] span=from_string:4:21 */, %x2 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:27:26 */, %x3 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:30:28 */, %x4 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:30:33 */, %x5 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:30:38 */, %x6 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:30:43 */, %x7 : Tensor[(12), float32] /* ty=Tensor[(12), float32] span=from_string:43:26 */, %x8 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:21:28 */, %x9 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:21:33 */, hash="5a6994a521ff5b35", ) -> (Tensor[(12, 1, 1), float32], Tensor[(12, 29), float32]) {
  %14 = fn (%p08: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="8154242fa5ca7763") -> Tensor[(12, 15), float32] {
    ceil(%p08) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32]) -> Tensor[(12, 15), float32] */;
  %15 = %14(%x0) /* ty=Tensor[(12, 15), float32] */;
  %16 = fn (%p07: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p12: Tensor[(10, 15), float32] /* ty=Tensor[(10, 15), float32] */, Primitive=1, hash="d2cbeee911168c27") -> Tensor[(12, 10), float32] {
    nn.dense(%p07, %p12, units=10) /* ty=Tensor[(12, 10), float32] */
  } /* ty=fn (Tensor[(12, 15), float32], Tensor[(10, 15), float32]) -> Tensor[(12, 10), float32] */;
  %17 = %16(%15, %x1) /* ty=Tensor[(12, 10), float32] */;
  %18 = fn (%p06: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, Primitive=1, hash="b6a2ece28172f1ed") -> Tensor[(12, 10), float32] {
    nn.softmax(%p06, axis=1) /* ty=Tensor[(12, 10), float32] */
  } /* ty=fn (Tensor[(12, 10), float32]) -> Tensor[(12, 10), float32] */;
  %19 = %18(%17) /* ty=Tensor[(12, 10), float32] */;
  %20 = fn (%p05: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, Primitive=1, hash="34f699c0cdb06ccd") -> Tensor[(12, 10), float32] {
    %12 = reshape(%p05, newshape=[12, 10]) /* ty=Tensor[(12, 10), float32] */;
    %13 = exp(%12) /* ty=Tensor[(12, 10), float32] */;
    divide(%13, %12) /* ty=Tensor[(12, 10), float32] */
  } /* ty=fn (Tensor[(12, 10), float32]) -> Tensor[(12, 10), float32] */;
  %21 = %20(%19) /* ty=Tensor[(12, 10), float32] */;
  %22 = fn (%p04: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, Primitive=1, hash="7df7075a7420b513") -> Tensor[(12, 10), float32] {
    %11 = nn.softmax(%p04, axis=1) /* ty=Tensor[(12, 10), float32] */;
    abs(%11) /* ty=Tensor[(12, 10), float32] */
  } /* ty=fn (Tensor[(12, 10), float32]) -> Tensor[(12, 10), float32] */;
  %23 = fn (%p09: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, Primitive=1, hash="7c03c04c18309d84") -> Tensor[(12, 10), float32] {
    transpose(%p09, axes=[0, 1]) /* ty=Tensor[(12, 10), float32] */
  } /* ty=fn (Tensor[(12, 10), float32]) -> Tensor[(12, 10), float32] */;
  %25 = %22(%21) /* ty=Tensor[(12, 10), float32] */;
  %26 = fn (%p010: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, Primitive=1, hash="f9e94f7e98a6a8a8") -> Tensor[(12, 1, 10), float32] {
    %24 = tanh(%p010) /* ty=Tensor[(12, 10), float32] */;
    reshape(%24, newshape=[12, 1, 10]) /* ty=Tensor[(12, 1, 10), float32] */
  } /* ty=fn (Tensor[(12, 10), float32]) -> Tensor[(12, 1, 10), float32] */;
  %27 = %23(%17) /* ty=Tensor[(12, 10), float32] */;
  %28 = %26(%25) /* ty=Tensor[(12, 1, 10), float32] */;
  %29 = fn (%p03: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, %p11: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, %p21: Tensor[(12, 1, 10), float32] /* ty=Tensor[(12, 1, 10), float32] */, Primitive=1, hash="973eb84471aada74") -> Tensor[(12, 1, 1), float32] {
    %8 = round(%p03) /* ty=Tensor[(12, 10), float32] */;
    %9 = divide(%8, %p11) /* ty=Tensor[(12, 10), float32] */;
    %10 = add(%p21, %9) /* ty=Tensor[(12, 12, 10), float32] */;
    sum(%10, axis=[1, 2], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 10), float32], Tensor[(12, 10), float32], Tensor[(12, 1, 10), float32]) -> Tensor[(12, 1, 1), float32] */;
  %30 = %29(%25, %27, %28) /* ty=Tensor[(12, 1, 1), float32] */;
  %31 = fn (%p02: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="64474434d99a24c3", layout="NCW", out_layout="") -> Tensor[(12, 1, 1), float32] {
    nn.adaptive_max_pool1d(%p02, output_size=[1]) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %32 = %31(%30) /* ty=Tensor[(12, 1, 1), float32] */;
  %33 = fn (%p01: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="58724f1d1a7b1a9f") -> Tensor[(12, 1, 1), float32] {
    %7 = transpose(%p01, axes=[0, 1, 2]) /* ty=Tensor[(12, 1, 1), float32] */;
    negative(%7) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %34 = %33(%32) /* ty=Tensor[(12, 1, 1), float32] */;
  %35 = fn (%p011: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="e4f54a0bcb93196f") -> Tensor[(12, 1, 1), float32] {
    mean(%p011, axis=[1], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %36 = %35(%34) /* ty=Tensor[(12, 1, 1), float32] */;
  %37 = fn (%p012: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p13: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="ad4401aa56061c92") -> Tensor[(12, 1, 1), float32] {
    variance(%p012, %p13, axis=[1], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32], Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %38 = %37(%34, %36) /* ty=Tensor[(12, 1, 1), float32] */;
  %39 = fn (%p0: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p1: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p2: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p3: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="0e5d70ec72b79e60") -> Tensor[(12, 1, 1), float32] {
    %0 = add(%p2, 1e-05f /* ty=float32 */) /* ty=Tensor[(12, 1, 1), float32] */;
    %1 = subtract(%p0, %p1) /* ty=Tensor[(12, 1, 1), float32] */;
    %2 = sqrt(%0) /* ty=Tensor[(12, 1, 1), float32] */;
    %3 = divide(%1, %2) /* ty=Tensor[(12, 1, 1), float32] */;
    %4 = expand_dims(%p3, axis=1) /* ty=Tensor[(1, 1), float32] */;
    %5 = multiply(%3, %4) /* ty=Tensor[(12, 1, 1), float32] */;
    %6 = split(%5, indices_or_sections=[], axis=1) /* ty=(Tensor[(12, 1, 1), float32],) */;
    %6.0 /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32], Tensor[(12, 1, 1), float32], Tensor[(12, 1, 1), float32], Tensor[(1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %67 = fn (%p019: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="eb0a76f2db79191c") -> Tensor[(12, 1, 1), float32] {
    exp(%p019) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %68 = %67(%30) /* ty=Tensor[(12, 1, 1), float32] */;
  %69 = fn (%p018: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="bea2f74341bb96c9") -> Tensor[(12, 1, 1), float32] {
    %66 = nn.softmax(%p018, axis=1) /* ty=Tensor[(12, 1, 1), float32] */;
    abs(%66) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %70 = %69(%68) /* ty=Tensor[(12, 1, 1), float32] */;
  %71 = fn (%p017: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p16: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="027f6e7334bef2cc") -> Tensor[(12, 1, 1), float32] {
    %65 = nn.softmax(%p017, axis=1) /* ty=Tensor[(12, 1, 1), float32] */;
    nn.bias_add(%65, %p16) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32], Tensor[(1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %72 = %71(%70, %x2) /* ty=Tensor[(12, 1, 1), float32] */;
  %73 = fn (%p016: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="e8a0faa9e6b14895") -> Tensor[(12, 1, 1), float32] {
    max(%p016, axis=[1], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %74 = %73(%72) /* ty=Tensor[(12, 1, 1), float32] */;
  %75 = fn (%p015: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="dd7821b6a290cdf5") -> Tensor[(12, 1, 1), float32] {
    strided_slice(%p015, begin=[0], end=[1], strides=[1], axes=[2]) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %76 = %75(%74) /* ty=Tensor[(12, 1, 1), float32] */;
  %77 = fn (%p014: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p15: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p23: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="007ed90a4e16e382") -> Tensor[(12, 1), float32] {
    %56 = add(%p014, 1e-05f /* ty=float32 */) /* ty=Tensor[(1), float32] */;
    %57 = sqrt(%56) /* ty=Tensor[(1), float32] */;
    %58 = divide(1f /* ty=float32 */, %57) /* ty=Tensor[(1), float32] */;
    %59 = expand_dims(%58, axis=1) /* ty=Tensor[(1, 1), float32] */;
    %60 = negative(%p23) /* ty=Tensor[(1), float32] */;
    %61 = multiply(%60, %58) /* ty=Tensor[(1), float32] */;
    %62 = multiply(%p15, %59) /* ty=Tensor[(12, 1, 1), float32] */;
    %63 = expand_dims(%61, axis=1) /* ty=Tensor[(1, 1), float32] */;
    %64 = add(%62, %63) /* ty=Tensor[(12, 1, 1), float32] */;
    min(%64, axis=[2]) /* ty=Tensor[(12, 1), float32] */
  } /* ty=fn (Tensor[(1), float32], Tensor[(12, 1, 1), float32], Tensor[(1), float32]) -> Tensor[(12, 1), float32] */;
  %78 = fn (%p021: Tensor[(12, 1, 10), float32] /* ty=Tensor[(12, 1, 10), float32] */, Primitive=1, hash="73b5d4fc2b264529") -> Tensor[(12, 1, 1), float32] {
    sum(%p021, axis=[2], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 10), float32]) -> Tensor[(12, 1, 1), float32] */;
  %79 = %78(%28) /* ty=Tensor[(12, 1, 1), float32] */;
  %80 = fn (%p020: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="6b1bbf62a7c83e0f", layout="NCW", out_layout="") -> Tensor[(12, 1, 1), float32] {
    nn.max_pool1d(%p020, pool_size=[3], dilation=[2], padding=[2, 2]) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %82 = fn (%p023: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="c944b63bf4bf5ad2") -> Tensor[(12, 15), float32] {
    tanh(%p023) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32]) -> Tensor[(12, 15), float32] */;
  %83 = %82(%x0) /* ty=Tensor[(12, 15), float32] */;
  %84 = fn (%p022: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="e1a15ad90080c14c") -> Tensor[(12, 1), float32] {
    %81 = trunc(%p022) /* ty=Tensor[(12, 15), float32] */;
    max(%81, axis=[1], keepdims=True) /* ty=Tensor[(12, 1), float32] */
  } /* ty=fn (Tensor[(12, 15), float32]) -> Tensor[(12, 1), float32] */;
  %85 = %77(%x6, %76, %x5) /* ty=Tensor[(12, 1), float32] */;
  %86 = %80(%79) /* ty=Tensor[(12, 1, 1), float32] */;
  %87 = %84(%83) /* ty=Tensor[(12, 1), float32] */;
  %88 = fn (%p013: Tensor[(12, 1), float32] /* ty=Tensor[(12, 1), float32] */, %p14: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p22: Tensor[(12, 1), float32] /* ty=Tensor[(12, 1), float32] */, %p31: Tensor[(12), float32] /* ty=Tensor[(12), float32] */, %p4: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="42c1898ae453bf1b") -> Tensor[(12, 29), float32] {
    %40 = tan(%p013) /* ty=Tensor[(12, 1), float32] */;
    %41 = divide(%p14, %p22) /* ty=Tensor[(12, 12, 1), float32] */;
    %42 = negative(%41) /* ty=Tensor[(12, 12, 1), float32] */;
    %43 = strided_slice(%42, begin=[0], end=[1], strides=[1], axes=[2]) /* ty=Tensor[(12, 12, 1), float32] */;
    %44 = nn.batch_flatten(%43) /* ty=Tensor[(12, 12), float32] */;
    %45 = nn.bias_add(%44, %p31) /* ty=Tensor[(12, 12), float32] */;
    %46 = nn.leaky_relu(%40, alpha=0.971295f) /* ty=Tensor[(12, 1), float32] */;
    %47 = cos(%45) /* ty=Tensor[(12, 12), float32] */;
    %48 = add(%46, %47) /* ty=Tensor[(12, 12), float32] */;
    %49 = nn.relu(%48) /* ty=Tensor[(12, 12), float32] */;
    %50 = transpose(%49, axes=[0, 1]) /* ty=Tensor[(12, 12), float32] */;
    %51 = ceil(%50) /* ty=Tensor[(12, 12), float32] */;
    %52 = exp(%51) /* ty=Tensor[(12, 12), float32] */;
    %53 = (%52, %p4, %46, %p22) /* ty=(Tensor[(12, 12), float32], Tensor[(12, 15), float32], Tensor[(12, 1), float32], Tensor[(12, 1), float32]) span=from_string:52:21 */;
    %54 = concatenate(%53, axis=1) /* ty=Tensor[(12, 29), float32] */;
    %55 = tan(%54) /* ty=Tensor[(12, 29), float32] */;
    transpose(%55, axes=[0, 1]) /* ty=Tensor[(12, 29), float32] */
  } /* ty=fn (Tensor[(12, 1), float32], Tensor[(12, 1, 1), float32], Tensor[(12, 1), float32], Tensor[(12), float32], Tensor[(12, 15), float32]) -> Tensor[(12, 29), float32] */;
  %89 = %39(%34, %36, %38, %x8) /* ty=Tensor[(12, 1, 1), float32] */;
  %90 = %88(%85, %86, %87, %x7, %83) /* ty=Tensor[(12, 29), float32] */;
  (%89, %90) /* ty=(Tensor[(12, 1, 1), float32], Tensor[(12, 29), float32]) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "VirtualDevice"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "15", 
        "target": "4", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "14", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "7", 
        "name": "6"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [12]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "0", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.16.0"}
}
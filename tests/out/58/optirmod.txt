#[version = "0.0.5"]
def @main(%x0 : Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] span=from_string:35:14 */, %x1 : Tensor[(10, 15), float32] /* ty=Tensor[(10, 15), float32] span=from_string:4:21 */, %x2 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:27:26 */, %x3 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:30:28 */, %x4 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:30:33 */, %x5 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:30:38 */, %x6 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:30:43 */, %x7 : Tensor[(12), float32] /* ty=Tensor[(12), float32] span=from_string:43:26 */, %x8 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:21:28 */, %x9 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:21:33 */, hash="f34efd3626931981", ) -> (Tensor[(12, 1, 1), float32], Tensor[(12, 29), float32]) {
  %14 = fn (%p08: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="8154242fa5ca7763") -> Tensor[(12, 15), float32] {
    ceil(%p08) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32]) -> Tensor[(12, 15), float32] */;
  %15 = fn (%p09: Tensor[(10, 15), float32] /* ty=Tensor[(10, 15), float32] */, Primitive=1, hash="2c18b0295a26ad71", src_layout="NC", dst_layout="NC5n") -> Tensor[(2, 15, 5), float32] {
    layout_transform(%p09, src_layout="NC", dst_layout="NC5n") /* ty=Tensor[(2, 15, 5), float32] */
  } /* ty=fn (Tensor[(10, 15), float32]) -> Tensor[(2, 15, 5), float32] */;
  %16 = %14(%x0) /* ty=Tensor[(12, 15), float32] */;
  %17 = %15(%x1) /* ty=Tensor[(2, 15, 5), float32] */;
  %18 = fn (%p07: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, %p12: Tensor[(2, 15, 5), float32] /* ty=Tensor[(2, 15, 5), float32] */, Primitive=1, hash="fd3c75fe069aa7ba", weight_layout="NC5n") -> Tensor[(12, 10), float32] {
    nn.contrib_dense_pack(%p07, %p12, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(12, 10), float32] */
  } /* ty=fn (Tensor[(12, 15), float32], Tensor[(2, 15, 5), float32]) -> Tensor[(12, 10), float32] */;
  %19 = %18(%16, %17) /* ty=Tensor[(12, 10), float32] */;
  %20 = fn (%p06: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, Primitive=1, hash="28b6689b766fabdf") -> Tensor[(12, 10), float32] {
    nn.fast_softmax(%p06, axis=1) /* ty=Tensor[(12, 10), float32] */
  } /* ty=fn (Tensor[(12, 10), float32]) -> Tensor[(12, 10), float32] */;
  %21 = %20(%19) /* ty=Tensor[(12, 10), float32] */;
  %22 = fn (%p05: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, Primitive=1, hash="b4f7acc435c90d95") -> Tensor[(12, 10), float32] {
    %12 = reshape(%p05, newshape=[12, 10]) /* ty=Tensor[(12, 10), float32] */;
    %13 = fast_exp(%12) /* ty=Tensor[(12, 10), float32] */;
    divide(%13, %12) /* ty=Tensor[(12, 10), float32] */
  } /* ty=fn (Tensor[(12, 10), float32]) -> Tensor[(12, 10), float32] */;
  %23 = %22(%21) /* ty=Tensor[(12, 10), float32] */;
  %24 = fn (%p04: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, Primitive=1, hash="221073b4bd332423") -> Tensor[(12, 10), float32] {
    %11 = nn.fast_softmax(%p04, axis=1) /* ty=Tensor[(12, 10), float32] */;
    abs(%11) /* ty=Tensor[(12, 10), float32] */
  } /* ty=fn (Tensor[(12, 10), float32]) -> Tensor[(12, 10), float32] */;
  %25 = fn (%p010: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, Primitive=1, hash="7c03c04c18309d84") -> Tensor[(12, 10), float32] {
    transpose(%p010, axes=[0, 1]) /* ty=Tensor[(12, 10), float32] */
  } /* ty=fn (Tensor[(12, 10), float32]) -> Tensor[(12, 10), float32] */;
  %27 = %24(%23) /* ty=Tensor[(12, 10), float32] */;
  %28 = fn (%p011: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, Primitive=1, hash="73ec4182ccbdc41f") -> Tensor[(12, 1, 10), float32] {
    %26 = fast_tanh(%p011) /* ty=Tensor[(12, 10), float32] */;
    reshape(%26, newshape=[12, 1, 10]) /* ty=Tensor[(12, 1, 10), float32] */
  } /* ty=fn (Tensor[(12, 10), float32]) -> Tensor[(12, 1, 10), float32] */;
  %29 = %25(%19) /* ty=Tensor[(12, 10), float32] */;
  %30 = %28(%27) /* ty=Tensor[(12, 1, 10), float32] */;
  %31 = fn (%p03: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, %p11: Tensor[(12, 10), float32] /* ty=Tensor[(12, 10), float32] */, %p21: Tensor[(12, 1, 10), float32] /* ty=Tensor[(12, 1, 10), float32] */, Primitive=1, hash="973eb84471aada74") -> Tensor[(12, 1, 1), float32] {
    %8 = round(%p03) /* ty=Tensor[(12, 10), float32] */;
    %9 = divide(%8, %p11) /* ty=Tensor[(12, 10), float32] */;
    %10 = add(%p21, %9) /* ty=Tensor[(12, 12, 10), float32] */;
    sum(%10, axis=[1, 2], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 10), float32], Tensor[(12, 10), float32], Tensor[(12, 1, 10), float32]) -> Tensor[(12, 1, 1), float32] */;
  %32 = %31(%27, %29, %30) /* ty=Tensor[(12, 1, 1), float32] */;
  %33 = fn (%p02: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="64474434d99a24c3", layout="NCW", out_layout="") -> Tensor[(12, 1, 1), float32] {
    nn.adaptive_max_pool1d(%p02, output_size=[1]) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %34 = %33(%32) /* ty=Tensor[(12, 1, 1), float32] */;
  %35 = fn (%p01: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="58724f1d1a7b1a9f") -> Tensor[(12, 1, 1), float32] {
    %7 = transpose(%p01, axes=[0, 1, 2]) /* ty=Tensor[(12, 1, 1), float32] */;
    negative(%7) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %36 = %35(%34) /* ty=Tensor[(12, 1, 1), float32] */;
  %37 = fn (%p012: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="e4f54a0bcb93196f") -> Tensor[(12, 1, 1), float32] {
    mean(%p012, axis=[1], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %38 = %37(%36) /* ty=Tensor[(12, 1, 1), float32] */;
  %39 = fn (%p013: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p13: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="ad4401aa56061c92") -> Tensor[(12, 1, 1), float32] {
    variance(%p013, %p13, axis=[1], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32], Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %40 = %39(%36, %38) /* ty=Tensor[(12, 1, 1), float32] */;
  %41 = fn (%p0: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p1: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p2: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p3: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="0e5d70ec72b79e60") -> Tensor[(12, 1, 1), float32] {
    %0 = add(%p2, 1e-05f /* ty=float32 */) /* ty=Tensor[(12, 1, 1), float32] */;
    %1 = subtract(%p0, %p1) /* ty=Tensor[(12, 1, 1), float32] */;
    %2 = sqrt(%0) /* ty=Tensor[(12, 1, 1), float32] */;
    %3 = divide(%1, %2) /* ty=Tensor[(12, 1, 1), float32] */;
    %4 = expand_dims(%p3, axis=1) /* ty=Tensor[(1, 1), float32] */;
    %5 = multiply(%3, %4) /* ty=Tensor[(12, 1, 1), float32] */;
    %6 = split(%5, indices_or_sections=[], axis=1) /* ty=(Tensor[(12, 1, 1), float32],) */;
    %6.0 /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32], Tensor[(12, 1, 1), float32], Tensor[(12, 1, 1), float32], Tensor[(1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %71 = fn (%p020: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="6b549dbb6d5f23ca") -> Tensor[(12, 1, 1), float32] {
    fast_exp(%p020) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %72 = %71(%32) /* ty=Tensor[(12, 1, 1), float32] */;
  %73 = fn (%p019: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="770c6a96fb9bc27a") -> Tensor[(12, 1, 1), float32] {
    %70 = nn.fast_softmax(%p019, axis=1) /* ty=Tensor[(12, 1, 1), float32] */;
    abs(%70) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %74 = %73(%72) /* ty=Tensor[(12, 1, 1), float32] */;
  %75 = fn (%p018: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p16: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="9ef16a765a1a35a5") -> Tensor[(12, 1, 1), float32] {
    %68 = nn.fast_softmax(%p018, axis=1) /* ty=Tensor[(12, 1, 1), float32] */;
    %69 = expand_dims(%p16, axis=1) /* ty=Tensor[(1, 1), float32] */;
    add(%68, %69) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32], Tensor[(1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %76 = %75(%74, %x2) /* ty=Tensor[(12, 1, 1), float32] */;
  %77 = fn (%p017: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="e8a0faa9e6b14895") -> Tensor[(12, 1, 1), float32] {
    max(%p017, axis=[1], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %78 = %77(%76) /* ty=Tensor[(12, 1, 1), float32] */;
  %79 = fn (%p016: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="dd7821b6a290cdf5") -> Tensor[(12, 1, 1), float32] {
    strided_slice(%p016, begin=[0], end=[1], strides=[1], axes=[2]) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %80 = %79(%78) /* ty=Tensor[(12, 1, 1), float32] */;
  %81 = fn (%p015: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p15: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p23: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="007ed90a4e16e382") -> Tensor[(12, 1), float32] {
    %59 = add(%p015, 1e-05f /* ty=float32 */) /* ty=Tensor[(1), float32] */;
    %60 = sqrt(%59) /* ty=Tensor[(1), float32] */;
    %61 = divide(1f /* ty=float32 */, %60) /* ty=Tensor[(1), float32] */;
    %62 = expand_dims(%61, axis=1) /* ty=Tensor[(1, 1), float32] */;
    %63 = negative(%p23) /* ty=Tensor[(1), float32] */;
    %64 = multiply(%63, %61) /* ty=Tensor[(1), float32] */;
    %65 = multiply(%p15, %62) /* ty=Tensor[(12, 1, 1), float32] */;
    %66 = expand_dims(%64, axis=1) /* ty=Tensor[(1, 1), float32] */;
    %67 = add(%65, %66) /* ty=Tensor[(12, 1, 1), float32] */;
    min(%67, axis=[2]) /* ty=Tensor[(12, 1), float32] */
  } /* ty=fn (Tensor[(1), float32], Tensor[(12, 1, 1), float32], Tensor[(1), float32]) -> Tensor[(12, 1), float32] */;
  %83 = fn (%p022: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="012c150160869699") -> Tensor[(12, 15), float32] {
    fast_tanh(%p022) /* ty=Tensor[(12, 15), float32] */
  } /* ty=fn (Tensor[(12, 15), float32]) -> Tensor[(12, 15), float32] */;
  %84 = %83(%x0) /* ty=Tensor[(12, 15), float32] */;
  %85 = fn (%p021: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="e1a15ad90080c14c") -> Tensor[(12, 1), float32] {
    %82 = trunc(%p021) /* ty=Tensor[(12, 15), float32] */;
    max(%82, axis=[1], keepdims=True) /* ty=Tensor[(12, 1), float32] */
  } /* ty=fn (Tensor[(12, 15), float32]) -> Tensor[(12, 1), float32] */;
  %86 = fn (%p024: Tensor[(12, 1, 10), float32] /* ty=Tensor[(12, 1, 10), float32] */, Primitive=1, hash="73b5d4fc2b264529") -> Tensor[(12, 1, 1), float32] {
    sum(%p024, axis=[2], keepdims=True) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 10), float32]) -> Tensor[(12, 1, 1), float32] */;
  %87 = %86(%30) /* ty=Tensor[(12, 1, 1), float32] */;
  %88 = fn (%p023: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, Primitive=1, hash="6b1bbf62a7c83e0f", layout="NCW", out_layout="") -> Tensor[(12, 1, 1), float32] {
    nn.max_pool1d(%p023, pool_size=[3], dilation=[2], padding=[2, 2]) /* ty=Tensor[(12, 1, 1), float32] */
  } /* ty=fn (Tensor[(12, 1, 1), float32]) -> Tensor[(12, 1, 1), float32] */;
  %89 = %81(%x6, %80, %x5) /* ty=Tensor[(12, 1), float32] */;
  %90 = %85(%84) /* ty=Tensor[(12, 1), float32] */;
  %91 = %88(%87) /* ty=Tensor[(12, 1, 1), float32] */;
  %92 = fn (%p014: Tensor[(12, 1), float32] /* ty=Tensor[(12, 1), float32] */, %p14: Tensor[(12, 1), float32] /* ty=Tensor[(12, 1), float32] */, %p22: Tensor[(12, 1, 1), float32] /* ty=Tensor[(12, 1, 1), float32] */, %p31: Tensor[(12), float32] /* ty=Tensor[(12), float32] */, %p4: Tensor[(12, 15), float32] /* ty=Tensor[(12, 15), float32] */, Primitive=1, hash="b97947b5e49782b8") -> Tensor[(12, 29), float32] {
    %42 = tan(%p014) /* ty=Tensor[(12, 1), float32] */;
    %43 = expand_dims(%p14, axis=0) /* ty=Tensor[(1, 12, 1), float32] */;
    %44 = divide(%p22, %43) /* ty=Tensor[(12, 12, 1), float32] */;
    %45 = negative(%44) /* ty=Tensor[(12, 12, 1), float32] */;
    %46 = strided_slice(%45, begin=[0], end=[1], strides=[1], axes=[2]) /* ty=Tensor[(12, 12, 1), float32] */;
    %47 = nn.batch_flatten(%46) /* ty=Tensor[(12, 12), float32] */;
    %48 = add(%47, %p31) /* ty=Tensor[(12, 12), float32] */;
    %49 = nn.leaky_relu(%42, alpha=0.971295f) /* ty=Tensor[(12, 1), float32] */;
    %50 = cos(%48) /* ty=Tensor[(12, 12), float32] */;
    %51 = add(%49, %50) /* ty=Tensor[(12, 12), float32] */;
    %52 = nn.relu(%51) /* ty=Tensor[(12, 12), float32] */;
    %53 = transpose(%52, axes=[0, 1]) /* ty=Tensor[(12, 12), float32] */;
    %54 = ceil(%53) /* ty=Tensor[(12, 12), float32] */;
    %55 = fast_exp(%54) /* ty=Tensor[(12, 12), float32] */;
    %56 = (%55, %p4, %49, %p14) /* ty=(Tensor[(12, 12), float32], Tensor[(12, 15), float32], Tensor[(12, 1), float32], Tensor[(12, 1), float32]) span=from_string:52:21 */;
    %57 = concatenate(%56, axis=1) /* ty=Tensor[(12, 29), float32] */;
    %58 = tan(%57) /* ty=Tensor[(12, 29), float32] */;
    transpose(%58, axes=[0, 1]) /* ty=Tensor[(12, 29), float32] */
  } /* ty=fn (Tensor[(12, 1), float32], Tensor[(12, 1), float32], Tensor[(12, 1, 1), float32], Tensor[(12), float32], Tensor[(12, 15), float32]) -> Tensor[(12, 29), float32] */;
  %93 = %41(%36, %38, %40, %x8) /* ty=Tensor[(12, 1, 1), float32] */;
  %94 = %92(%89, %90, %91, %x7, %84) /* ty=Tensor[(12, 29), float32] */;
  (%93, %94) /* ty=(Tensor[(12, 1, 1), float32], Tensor[(12, 29), float32]) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.attrs.DensePackAttrs", 
        "VirtualDevice"
      ], 
      "data": [2, 5]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "4"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC5n"
    }, 
    {
      "type_key": "Array", 
      "data": [6]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "18", 
        "target": "7", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "14", 
        "features": "16", 
        "host": "17", 
        "keys": "13", 
        "kind": "8", 
        "tag": "12"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "10", 
        "name": "9"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [11]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [11]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [15]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "14", 
        "features": "16", 
        "host": "0", 
        "keys": "13", 
        "kind": "8", 
        "tag": "12"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.16.0"}
}
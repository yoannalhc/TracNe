#[version = "0.0.5"]
def @main(%x0 : Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] span=from_string:3:23 */, %x1 : Tensor[(14), float16] /* ty=Tensor[(14), float16] span=from_string:17:28 */, %x2 : Tensor[(14), float16] /* ty=Tensor[(14), float16] span=from_string:17:33 */, %x3 : Tensor[(7), float16] /* ty=Tensor[(7), float16] span=from_string:25:23 */, hash="97fe5bf1b6f8c677", ) -> (Tensor[(14, 35), float16],) {
  %21 = fn (%p04: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, Primitive=1, hash="31987d1051b25202") -> Tensor[(14, 14), float16] {
    %20 = multiply(%p04, %p04) /* ty=Tensor[(14, 14), float16] */;
    ceil(%20) /* ty=Tensor[(14, 14), float16] */
  } /* ty=fn (Tensor[(14, 14), float16]) -> Tensor[(14, 14), float16] */;
  %22 = %21(%x0) /* ty=Tensor[(14, 14), float16] */;
  %23 = fn (%p03: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, Primitive=1, hash="cc99741a020e8395") -> Tensor[(14, 14), float16] {
    %19 = abs(%p03) /* ty=Tensor[(14, 14), float16] */;
    cos(%19) /* ty=Tensor[(14, 14), float16] */
  } /* ty=fn (Tensor[(14, 14), float16]) -> Tensor[(14, 14), float16] */;
  %24 = %23(%22) /* ty=Tensor[(14, 14), float16] */;
  %25 = fn (%p05: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, Primitive=1, hash="085eb78121ece46e") -> Tensor[(14, 14), float16] {
    abs(%p05) /* ty=Tensor[(14, 14), float16] */
  } /* ty=fn (Tensor[(14, 14), float16]) -> Tensor[(14, 14), float16] */;
  %26 = %25(%24) /* ty=Tensor[(14, 14), float16] */;
  %27 = fn (%p02: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, %p11: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, %p21: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, Primitive=1, hash="09c30eec975632af") -> Tensor[(14, 14), float16] {
    %13 = multiply(%p02, %p11) /* ty=Tensor[(14, 14), float16] */;
    %14 = transpose(%13, axes=[0, 1]) /* ty=Tensor[(14, 14), float16] */;
    %15 = abs(%14) /* ty=Tensor[(14, 14), float16] */;
    %16 = maximum(%15, %15) /* ty=Tensor[(14, 14), float16] */;
    %17 = subtract(%16, %p21) /* ty=Tensor[(14, 14), float16] */;
    %18 = maximum(%17, %13) /* ty=Tensor[(14, 14), float16] */;
    abs(%18) /* ty=Tensor[(14, 14), float16] */
  } /* ty=fn (Tensor[(14, 14), float16], Tensor[(14, 14), float16], Tensor[(14, 14), float16]) -> Tensor[(14, 14), float16] */;
  %28 = %27(%24, %22, %26) /* ty=Tensor[(14, 14), float16] */;
  %29 = fn (%p01: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, Primitive=1, hash="4dec589a554299c9") -> Tensor[(14, 14), float16] {
    %12 = nn.fast_softmax(%p01, axis=1) /* ty=Tensor[(14, 14), float16] */;
    fast_tanh(%12) /* ty=Tensor[(14, 14), float16] */
  } /* ty=fn (Tensor[(14, 14), float16]) -> Tensor[(14, 14), float16] */;
  %30 = %29(%28) /* ty=Tensor[(14, 14), float16] */;
  %31 = fn (%p06: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, Primitive=1, hash="654a7d6754781f31") -> Tensor[(14, 1), float16] {
    mean(%p06, axis=[1], keepdims=True) /* ty=Tensor[(14, 1), float16] */
  } /* ty=fn (Tensor[(14, 14), float16]) -> Tensor[(14, 1), float16] */;
  %32 = %31(%30) /* ty=Tensor[(14, 1), float16] */;
  %33 = fn (%p07: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, %p12: Tensor[(14, 1), float16] /* ty=Tensor[(14, 1), float16] */, Primitive=1, hash="5bf658f7f67738cb") -> Tensor[(14, 1), float16] {
    variance(%p07, %p12, axis=[1], keepdims=True) /* ty=Tensor[(14, 1), float16] */
  } /* ty=fn (Tensor[(14, 14), float16], Tensor[(14, 1), float16]) -> Tensor[(14, 1), float16] */;
  %36 = fn (%p011: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, Primitive=1, hash="3ce97038ce5c90ad") -> Tensor[(14, 7, 2), float16] {
    %34 = round(%p011) /* ty=Tensor[(14, 14), float16] */;
    %35 = reshape(%34, newshape=[14, 7, 2]) /* ty=Tensor[(14, 7, 2), float16] */;
    nn.leaky_relu(%35, alpha=0.127947f) /* ty=Tensor[(14, 7, 2), float16] */
  } /* ty=fn (Tensor[(14, 14), float16]) -> Tensor[(14, 7, 2), float16] */;
  %37 = %36(%26) /* ty=Tensor[(14, 7, 2), float16] */;
  %38 = fn (%p010: Tensor[(14, 7, 2), float16] /* ty=Tensor[(14, 7, 2), float16] */, Primitive=1, hash="95dd328c0bfdbe52", layout="NCW", out_layout="") -> Tensor[(14, 7, 1), float16] {
    nn.adaptive_max_pool1d(%p010, output_size=[1]) /* ty=Tensor[(14, 7, 1), float16] */
  } /* ty=fn (Tensor[(14, 7, 2), float16]) -> Tensor[(14, 7, 1), float16] */;
  %39 = %38(%37) /* ty=Tensor[(14, 7, 1), float16] */;
  %40 = fn (%p09: Tensor[(14, 7, 1), float16] /* ty=Tensor[(14, 7, 1), float16] */, Primitive=1, hash="2f099ea6468b540f") -> Tensor[(14, 7, 1), float16] {
    transpose(%p09, axes=[0, 1, 2]) /* ty=Tensor[(14, 7, 1), float16] */
  } /* ty=fn (Tensor[(14, 7, 1), float16]) -> Tensor[(14, 7, 1), float16] */;
  %41 = %40(%39) /* ty=Tensor[(14, 7, 1), float16] */;
  %42 = fn (%p08: Tensor[(14, 7, 1), float16] /* ty=Tensor[(14, 7, 1), float16] */, Primitive=1, hash="2f7102f94bf30613") -> Tensor[(14, 7), float16] {
    min(%p08, axis=[2]) /* ty=Tensor[(14, 7), float16] */
  } /* ty=fn (Tensor[(14, 7, 1), float16]) -> Tensor[(14, 7), float16] */;
  %43 = %33(%30, %32) /* ty=Tensor[(14, 1), float16] */;
  %44 = %42(%41) /* ty=Tensor[(14, 7), float16] */;
  %45 = fn (%p0: Tensor[(14, 14), float16] /* ty=Tensor[(14, 14), float16] */, %p1: Tensor[(14, 1), float16] /* ty=Tensor[(14, 1), float16] */, %p2: Tensor[(14, 1), float16] /* ty=Tensor[(14, 1), float16] */, %p3: float16 /* ty=float16 */, %p4: Tensor[(14, 7), float16] /* ty=Tensor[(14, 7), float16] */, %p5: Tensor[(7), float16] /* ty=Tensor[(7), float16] */, Primitive=1, hash="c9483f51a9a5858d") -> Tensor[(14, 35), float16] {
    %0 = add(%p2, %p3) /* ty=Tensor[(14, 1), float16] */;
    %1 = subtract(%p0, %p1) /* ty=Tensor[(14, 14), float16] */;
    %2 = sqrt(%0) /* ty=Tensor[(14, 1), float16] */;
    %3 = divide(%1, %2) /* ty=Tensor[(14, 14), float16] */;
    %4 = nn.prelu(%p4, %p5) /* ty=Tensor[(14, 7), float16] */;
    %5 = ceil(%4) /* ty=Tensor[(14, 7), float16] */;
    %6 = round(%5) /* ty=Tensor[(14, 7), float16] */;
    %7 = minimum(%3, %p0) /* ty=Tensor[(14, 14), float16] */;
    %8 = floor(%6) /* ty=Tensor[(14, 7), float16] */;
    %9 = (%7, %8, %7) /* ty=(Tensor[(14, 14), float16], Tensor[(14, 7), float16], Tensor[(14, 14), float16]) span=from_string:31:21 */;
    %10 = concatenate(%9, axis=1) /* ty=Tensor[(14, 35), float16] */;
    %11 = abs(%10) /* ty=Tensor[(14, 35), float16] */;
    transpose(%11, axes=[0, 1]) /* ty=Tensor[(14, 35), float16] */
  } /* ty=fn (Tensor[(14, 14), float16], Tensor[(14, 1), float16], Tensor[(14, 1), float16], float16, Tensor[(14, 7), float16], Tensor[(7), float16]) -> Tensor[(14, 35), float16] */;
  %46 = %45(%30, %32, %43, 1.00136e-05f16 /* ty=float16 */, %44, %x3) /* ty=Tensor[(14, 35), float16] */;
  (%46,) /* ty=(Tensor[(14, 35), float16],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "VirtualDevice"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "15", 
        "target": "4", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "14", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "7", 
        "name": "6"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [12]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "0", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.16.0"}
}
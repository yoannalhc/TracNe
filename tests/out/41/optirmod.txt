#[version = "0.0.5"]
def @main(%x0 : Tensor[(5), float16] /* ty=Tensor[(5), float16] span=from_string:3:12 */, %x1 : Tensor[(1), float16] /* ty=Tensor[(1), float16] span=from_string:13:27 */, %x2 : Tensor[(1), float16] /* ty=Tensor[(1), float16] span=from_string:13:32 */, %x3 : Tensor[(1), float16] /* ty=Tensor[(1), float16] span=from_string:14:26 */, %x4 : Tensor[(2, 1), float16] /* ty=Tensor[(2, 1), float16] span=from_string:18:23 */, %x5 : Tensor[(3, 1), float16] /* ty=Tensor[(3, 1), float16] span=from_string:12:21 */, %x6 : Tensor[(2), float16] /* ty=Tensor[(2), float16] span=from_string:29:26 */, %x7 : Tensor[(2), float16] /* ty=Tensor[(2), float16] span=from_string:32:28 */, %x8 : Tensor[(2), float16] /* ty=Tensor[(2), float16] span=from_string:32:33 */, hash="66b7d2a99dc15739", ) -> (Tensor[(5, 2), float16],) {
  %29 = fn (%p06: Tensor[(5), float16] /* ty=Tensor[(5), float16] */, Primitive=1, hash="1020de0cd40199b4") -> Tensor[(5, 1), float16] {
    %25 = sin(%p06) /* ty=Tensor[(5), float16] */;
    %26 = nn.leaky_relu(%25, alpha=0.418746f) /* ty=Tensor[(5), float16] */;
    %27 = fast_tanh(%26) /* ty=Tensor[(5), float16] */;
    %28 = reshape(%27, newshape=[5, 1]) /* ty=Tensor[(5, 1), float16] */;
    multiply(%28, %28) /* ty=Tensor[(5, 1), float16] */
  } /* ty=fn (Tensor[(5), float16]) -> Tensor[(5, 1), float16] */;
  %30 = %29(%x0) /* ty=Tensor[(5, 1), float16] */;
  %31 = fn (%p05: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, Primitive=1, hash="97794cfed6a37973") -> Tensor[(5, 1), float16] {
    %24 = nn.fast_softmax(%p05, axis=1) /* ty=Tensor[(5, 1), float16] */;
    subtract(%24, %24) /* ty=Tensor[(5, 1), float16] */
  } /* ty=fn (Tensor[(5, 1), float16]) -> Tensor[(5, 1), float16] */;
  %32 = %31(%30) /* ty=Tensor[(5, 1), float16] */;
  %33 = fn (%p04: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, Primitive=1, relay.reshape_only=1, hash="4d48678247c4f6d0") -> Tensor[(5, 1, 1), float16] {
    reshape(%p04, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float16] */
  } /* ty=fn (Tensor[(5, 1), float16]) -> Tensor[(5, 1, 1), float16] */;
  %34 = %33(%32) /* ty=Tensor[(5, 1, 1), float16] */;
  %35 = fn (%p07: Tensor[(5, 1, 1), float16] /* ty=Tensor[(5, 1, 1), float16] */, Primitive=1, hash="b94e38901187558e") -> Tensor[(5, 1, 1), float16] {
    mean(%p07, axis=[2], keepdims=True) /* ty=Tensor[(5, 1, 1), float16] */
  } /* ty=fn (Tensor[(5, 1, 1), float16]) -> Tensor[(5, 1, 1), float16] */;
  %36 = %35(%34) /* ty=Tensor[(5, 1, 1), float16] */;
  %37 = fn (%p08: Tensor[(5, 1, 1), float16] /* ty=Tensor[(5, 1, 1), float16] */, %p13: Tensor[(5, 1, 1), float16] /* ty=Tensor[(5, 1, 1), float16] */, Primitive=1, hash="50827324a6a0bc96") -> Tensor[(5, 1, 1), float16] {
    variance(%p08, %p13, axis=[2], keepdims=True) /* ty=Tensor[(5, 1, 1), float16] */
  } /* ty=fn (Tensor[(5, 1, 1), float16], Tensor[(5, 1, 1), float16]) -> Tensor[(5, 1, 1), float16] */;
  %38 = %37(%34, %36) /* ty=Tensor[(5, 1, 1), float16] */;
  %39 = fn (%p03: Tensor[(5, 1, 1), float16] /* ty=Tensor[(5, 1, 1), float16] */, %p12: Tensor[(5, 1, 1), float16] /* ty=Tensor[(5, 1, 1), float16] */, %p22: Tensor[(5, 1, 1), float16] /* ty=Tensor[(5, 1, 1), float16] */, %p32: float16 /* ty=float16 */, %p41: Tensor[(1), float16] /* ty=Tensor[(1), float16] */, %p5: Tensor[(1), float16] /* ty=Tensor[(1), float16] */, Primitive=1, hash="e0b372b796133c42") -> Tensor[(5, 1), float16] {
    %18 = add(%p22, %p32) /* ty=Tensor[(5, 1, 1), float16] */;
    %19 = subtract(%p03, %p12) /* ty=Tensor[(5, 1, 1), float16] */;
    %20 = sqrt(%18) /* ty=Tensor[(5, 1, 1), float16] */;
    %21 = divide(%19, %20) /* ty=Tensor[(5, 1, 1), float16] */;
    %22 = reshape(%21, newshape=[5, 1]) /* ty=Tensor[(5, 1), float16] */;
    %23 = multiply(%22, %p41) /* ty=Tensor[(5, 1), float16] */;
    add(%23, %p5) /* ty=Tensor[(5, 1), float16] */
  } /* ty=fn (Tensor[(5, 1, 1), float16], Tensor[(5, 1, 1), float16], Tensor[(5, 1, 1), float16], float16, Tensor[(1), float16], Tensor[(1), float16]) -> Tensor[(5, 1), float16] */;
  %40 = %39(%34, %36, %38, 1.00136e-05f16 /* ty=float16 */, %x1, %x3) /* ty=Tensor[(5, 1), float16] */;
  %41 = fn (%p02: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, Primitive=1, hash="4e3dbc51a0a16bc6") -> Tensor[(5, 1), float16] {
    %16 = abs(%p02) /* ty=Tensor[(5, 1), float16] */;
    %17 = nn.relu(%16) /* ty=Tensor[(5, 1), float16] */;
    ceil(%17) /* ty=Tensor[(5, 1), float16] */
  } /* ty=fn (Tensor[(5, 1), float16]) -> Tensor[(5, 1), float16] */;
  %42 = fn (%p09: Tensor[(2, 1), float16] /* ty=Tensor[(2, 1), float16] */, Primitive=1, hash="ba2c153d680d213e", src_layout="NC", dst_layout="NC2n") -> Tensor[(1, 1, 2), float16] {
    layout_transform(%p09, src_layout="NC", dst_layout="NC2n") /* ty=Tensor[(1, 1, 2), float16] */
  } /* ty=fn (Tensor[(2, 1), float16]) -> Tensor[(1, 1, 2), float16] */;
  %44 = fn (%p012: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, Primitive=1, hash="2e2b506eaf9e9795") -> Tensor[(5, 1), float16] {
    %43 = nn.leaky_relu(%p012, alpha=0.145388f) /* ty=Tensor[(5, 1), float16] */;
    trunc(%43) /* ty=Tensor[(5, 1), float16] */
  } /* ty=fn (Tensor[(5, 1), float16]) -> Tensor[(5, 1), float16] */;
  %45 = fn (%p013: Tensor[(3, 1), float16] /* ty=Tensor[(3, 1), float16] */, Primitive=1, hash="8d04bfcbcf111280", src_layout="NC", dst_layout="NC3n") -> Tensor[(1, 1, 3), float16] {
    layout_transform(%p013, src_layout="NC", dst_layout="NC3n") /* ty=Tensor[(1, 1, 3), float16] */
  } /* ty=fn (Tensor[(3, 1), float16]) -> Tensor[(1, 1, 3), float16] */;
  %46 = %44(%32) /* ty=Tensor[(5, 1), float16] */;
  %47 = %45(%x5) /* ty=Tensor[(1, 1, 3), float16] */;
  %48 = fn (%p011: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, %p14: Tensor[(1, 1, 3), float16] /* ty=Tensor[(1, 1, 3), float16] */, Primitive=1, hash="b941b59496877163", weight_layout="NC3n") -> Tensor[(5, 3), float16] {
    nn.contrib_dense_pack(%p011, %p14, meta[relay.attrs.DensePackAttrs][1]) /* ty=Tensor[(5, 3), float16] */
  } /* ty=fn (Tensor[(5, 1), float16], Tensor[(1, 1, 3), float16]) -> Tensor[(5, 3), float16] */;
  %49 = %48(%46, %47) /* ty=Tensor[(5, 3), float16] */;
  %50 = fn (%p010: Tensor[(5, 3), float16] /* ty=Tensor[(5, 3), float16] */, Primitive=1, hash="09df743a7523449b") -> Tensor[(5, 1), float16] {
    mean(%p010, axis=[1], keepdims=True) /* ty=Tensor[(5, 1), float16] */
  } /* ty=fn (Tensor[(5, 3), float16]) -> Tensor[(5, 1), float16] */;
  %51 = %41(%40) /* ty=Tensor[(5, 1), float16] */;
  %52 = %42(%x4) /* ty=Tensor[(1, 1, 2), float16] */;
  %53 = %50(%49) /* ty=Tensor[(5, 1), float16] */;
  %54 = fn (%p01: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, %p11: Tensor[(1, 1, 2), float16] /* ty=Tensor[(1, 1, 2), float16] */, %p21: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, %p31: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, %p4: Tensor[(2), float16] /* ty=Tensor[(2), float16] */, Primitive=1, hash="cfea9cbf7cc38599", weight_layout="NC2n") -> Tensor[(5, 2), float16] {
    %3 = nn.contrib_dense_pack(%p01, %p11, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(5, 2), float16] */;
    %4 = fast_exp(%3) /* ty=Tensor[(5, 2), float16] */;
    %5 = divide(%4, %p21) /* ty=Tensor[(5, 2), float16] */;
    %6 = fast_tanh(%5) /* ty=Tensor[(5, 2), float16] */;
    %7 = round(%6) /* ty=Tensor[(5, 2), float16] */;
    %8 = nn.relu(%7) /* ty=Tensor[(5, 2), float16] */;
    %9 = fast_exp(%8) /* ty=Tensor[(5, 2), float16] */;
    %10 = nn.leaky_relu(%9, alpha=0.0771588f) /* ty=Tensor[(5, 2), float16] */;
    %11 = subtract(%p31, %10) /* ty=Tensor[(5, 2), float16] */;
    %12 = subtract(%11, %5) /* ty=Tensor[(5, 2), float16] */;
    %13 = expand_dims(%p4, axis=0) /* ty=Tensor[(1, 2), float16] */;
    %14 = add(%12, %13) /* ty=Tensor[(5, 2), float16] */;
    %15 = negative(%14) /* ty=Tensor[(5, 2), float16] */;
    abs(%15) /* ty=Tensor[(5, 2), float16] */
  } /* ty=fn (Tensor[(5, 1), float16], Tensor[(1, 1, 2), float16], Tensor[(5, 1), float16], Tensor[(5, 1), float16], Tensor[(2), float16]) -> Tensor[(5, 2), float16] */;
  %55 = %54(%51, %52, %40, %53, %x6) /* ty=Tensor[(5, 2), float16] */;
  %56 = fn (%p014: Tensor[(5, 2), float16] /* ty=Tensor[(5, 2), float16] */, Primitive=1, hash="afd9c3d10147316f") -> Tensor[(5, 1), float16] {
    mean(%p014, axis=[1], keepdims=True) /* ty=Tensor[(5, 1), float16] */
  } /* ty=fn (Tensor[(5, 2), float16]) -> Tensor[(5, 1), float16] */;
  %57 = %56(%55) /* ty=Tensor[(5, 1), float16] */;
  %58 = fn (%p015: Tensor[(5, 2), float16] /* ty=Tensor[(5, 2), float16] */, %p15: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, Primitive=1, hash="7951b2ca6d0ebfa7") -> Tensor[(5, 1), float16] {
    variance(%p015, %p15, axis=[1], keepdims=True) /* ty=Tensor[(5, 1), float16] */
  } /* ty=fn (Tensor[(5, 2), float16], Tensor[(5, 1), float16]) -> Tensor[(5, 1), float16] */;
  %59 = %58(%55, %57) /* ty=Tensor[(5, 1), float16] */;
  %60 = fn (%p0: Tensor[(5, 2), float16] /* ty=Tensor[(5, 2), float16] */, %p1: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, %p2: Tensor[(5, 1), float16] /* ty=Tensor[(5, 1), float16] */, %p3: float16 /* ty=float16 */, Primitive=1, hash="0fa6bbc8bd3bf9c9") -> Tensor[(5, 2), float16] {
    %0 = add(%p2, %p3) /* ty=Tensor[(5, 1), float16] */;
    %1 = subtract(%p0, %p1) /* ty=Tensor[(5, 2), float16] */;
    %2 = sqrt(%0) /* ty=Tensor[(5, 1), float16] */;
    divide(%1, %2) /* ty=Tensor[(5, 2), float16] */
  } /* ty=fn (Tensor[(5, 2), float16], Tensor[(5, 1), float16], Tensor[(5, 1), float16], float16) -> Tensor[(5, 2), float16] */;
  %61 = %60(%55, %57, %59, 1.00136e-05f16 /* ty=float16 */) /* ty=Tensor[(5, 2), float16] */;
  (%61,) /* ty=(Tensor[(5, 2), float16],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.attrs.DensePackAttrs", 
        "VirtualDevice"
      ], 
      "data": [2, 7]
    }, 
    {
      "type_key": "Array", 
      "data": [3, 5]
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float16", 
        "units": "0", 
        "weight_layout": "4"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC2n"
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float16", 
        "units": "0", 
        "weight_layout": "6"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC3n"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "20", 
        "target": "9", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "16", 
        "features": "18", 
        "host": "19", 
        "keys": "15", 
        "kind": "10", 
        "tag": "14"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "12", 
        "name": "11"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [13]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [13]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [17]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "16", 
        "features": "18", 
        "host": "0", 
        "keys": "15", 
        "kind": "10", 
        "tag": "14"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.16.0"}
}
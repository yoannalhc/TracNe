#[version = "0.0.5"]
def @main(%pzx : Tensor[(64, 4), float32] /* ty=Tensor[(64, 4), float32] span=from_string:3:17 */, %pzweight : Tensor[(3, 4), float32] /* ty=Tensor[(3, 4), float32] span=from_string:3:23 */, %pzin_bias : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:16 */, %px1 : Tensor[(1, 1), float32] /* ty=Tensor[(1, 1), float32] span=from_string:26:23 */, %px2 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:29:28 */, %px3 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:29:34 */, %px4 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:34:28 */, %px5 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:34:34 */, %px6 : Tensor[(16, 1), float32] /* ty=Tensor[(16, 1), float32] span=from_string:35:23 */, %px7 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:37:26 */, hash="3127663e0a3d00a5", ) -> (Tensor[(64), float32], Tensor[(64, 1), float32], Tensor[(64, 16), float32]) {
  %16 = fn (%p05: Tensor[(64, 4), float32] /* ty=Tensor[(64, 4), float32] */, %p1: Tensor[(3, 4), float32] /* ty=Tensor[(3, 4), float32] */, %p2: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p3: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, Primitive=1, hash="c49e9a479071ed63") -> Tensor[(64, 3), float32] {
    %13 = nn.dense(%p05, %p1, units=None) /* ty=Tensor[(64, 3), float32] */;
    %14 = add(%13, %p2) /* ty=Tensor[(64, 3), float32] */;
    %15 = nn.relu(%14) /* ty=Tensor[(64, 3), float32] */;
    multiply(%15, %p3) /* ty=Tensor[(64, 3), float32] */
  } /* ty=fn (Tensor[(64, 4), float32], Tensor[(3, 4), float32], Tensor[(3), float32], Tensor[(3), float32]) -> Tensor[(64, 3), float32] */;
  %17 = %16(%pzx, %pzweight, %pzin_bias, meta[relay.Constant][0] /* ty=Tensor[(3), float32] span=from_string:6:27 */) /* ty=Tensor[(64, 3), float32] */;
  %18 = fn (%p04: Tensor[(64, 3), float32] /* ty=Tensor[(64, 3), float32] */, Primitive=1, hash="c0e656f98d622731") -> Tensor[(64, 12), float32] {
    %7 = negative(%p04) /* ty=Tensor[(64, 3), float32] */;
    %8 = divide(%7, %p04) /* ty=Tensor[(64, 3), float32] */;
    %9 = nn.relu(%8) /* ty=Tensor[(64, 3), float32] */;
    %10 = sigmoid(%7) /* ty=Tensor[(64, 3), float32] */;
    %11 = add(%9, %10) /* ty=Tensor[(64, 3), float32] */;
    %12 = (%9, %11, %8, %11) /* ty=(Tensor[(64, 3), float32], Tensor[(64, 3), float32], Tensor[(64, 3), float32], Tensor[(64, 3), float32]) span=from_string:13:21 */;
    concatenate(%12, axis=1) /* ty=Tensor[(64, 12), float32] */
  } /* ty=fn (Tensor[(64, 3), float32]) -> Tensor[(64, 12), float32] */;
  %19 = %18(%17) /* ty=Tensor[(64, 12), float32] */;
  %20 = fn (%p03: Tensor[(64, 12), float32] /* ty=Tensor[(64, 12), float32] */, Primitive=1, hash="15e92b4740b4f2c1") -> Tensor[(64, 12), float32] {
    %6 = nn.softmax(%p03, axis=1) /* ty=Tensor[(64, 12), float32] */;
    sin(%6) /* ty=Tensor[(64, 12), float32] */
  } /* ty=fn (Tensor[(64, 12), float32]) -> Tensor[(64, 12), float32] */;
  %21 = %20(%19) /* ty=Tensor[(64, 12), float32] */;
  %22 = fn (%p02: Tensor[(64, 12), float32] /* ty=Tensor[(64, 12), float32] */, Primitive=1, relay.reshape_only=1, hash="797b3671e8b59b52") -> Tensor[(64, 12), float32] {
    reshape(%p02, newshape=[64, 12]) /* ty=Tensor[(64, 12), float32] */
  } /* ty=fn (Tensor[(64, 12), float32]) -> Tensor[(64, 12), float32] */;
  %23 = %22(%21) /* ty=Tensor[(64, 12), float32] */;
  %24 = fn (%p01: Tensor[(64, 12), float32] /* ty=Tensor[(64, 12), float32] */, Primitive=1, hash="c6f28f5359b731fd") -> Tensor[(64), float32] {
    max(%p01, axis=[1]) /* ty=Tensor[(64), float32] */
  } /* ty=fn (Tensor[(64, 12), float32]) -> Tensor[(64), float32] */;
  %25 = %24(%23) /* ty=Tensor[(64), float32] */;
  %26 = fn (%p0: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1, hash="6bfa39af2ba3add5") -> Tensor[(64), float32] {
    %0 = sigmoid(%p0) /* ty=Tensor[(64), float32] */;
    %1 = nn.relu(%0) /* ty=Tensor[(64), float32] */;
    %2 = sigmoid(%1) /* ty=Tensor[(64), float32] */;
    %3 = cos(%2) /* ty=Tensor[(64), float32] */;
    %4 = tan(%3) /* ty=Tensor[(64), float32] */;
    %5 = exp(%4) /* ty=Tensor[(64), float32] */;
    sin(%5) /* ty=Tensor[(64), float32] */
  } /* ty=fn (Tensor[(64), float32]) -> Tensor[(64), float32] */;
  %30 = fn (%p08: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1, hash="c4dba4a15d52e5a0") -> Tensor[(64, 1), float32] {
    %29 = sin(%p08) /* ty=Tensor[(64), float32] */;
    reshape(%29, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64), float32]) -> Tensor[(64, 1), float32] */;
  %31 = %30(%25) /* ty=Tensor[(64, 1), float32] */;
  %32 = fn (%p07: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p12: Tensor[(1, 1), float32] /* ty=Tensor[(1, 1), float32] */, Primitive=1, hash="7c03b2b7c4f3332b") -> Tensor[(64, 1), float32] {
    %27 = nn.dense(%p07, %p12, units=1) /* ty=Tensor[(64, 1), float32] */;
    %28 = abs(%27) /* ty=Tensor[(64, 1), float32] */;
    abs(%28) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(1, 1), float32]) -> Tensor[(64, 1), float32] */;
  %33 = %32(%31, %px1) /* ty=Tensor[(64, 1), float32] */;
  %34 = fn (%p06: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p11: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="b993c2799977afb1") -> Tensor[(64, 1), float32] {
    nn.bias_add(%p06, %p11) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(1), float32]) -> Tensor[(64, 1), float32] */;
  %47 = fn (%p013: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="9e68f00b7b357188") -> Tensor[(64, 1), float32] {
    mean(%p013, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %48 = %47(%33) /* ty=Tensor[(64, 1), float32] */;
  %49 = fn (%p014: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p16: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="44313a229d4ac329") -> Tensor[(64, 1), float32] {
    variance(%p014, %p16, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %50 = %49(%33, %48) /* ty=Tensor[(64, 1), float32] */;
  %51 = fn (%p012: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p15: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p22: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p32: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="ac0cef0aa0b6f17c") -> Tensor[(64, 1), float32] {
    %39 = add(%p22, 1e-05f /* ty=float32 */) /* ty=Tensor[(64, 1), float32] */;
    %40 = subtract(%p012, %p15) /* ty=Tensor[(64, 1), float32] */;
    %41 = sqrt(%39) /* ty=Tensor[(64, 1), float32] */;
    %42 = divide(%40, %41) /* ty=Tensor[(64, 1), float32] */;
    %43 = multiply(%42, %p32) /* ty=Tensor[(64, 1), float32] */;
    %44 = nn.batch_flatten(%43) /* ty=Tensor[(64, 1), float32] */;
    %45 = negative(%44) /* ty=Tensor[(64, 1), float32] */;
    %46 = split(%45, indices_or_sections=[], axis=1) /* ty=(Tensor[(64, 1), float32],) */;
    %46.0 /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32], Tensor[(64, 1), float32], Tensor[(1), float32]) -> Tensor[(64, 1), float32] */;
  %52 = %51(%33, %48, %50, %px2) /* ty=Tensor[(64, 1), float32] */;
  %53 = fn (%p015: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="9e68f00b7b357188") -> Tensor[(64, 1), float32] {
    mean(%p015, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %54 = %53(%52) /* ty=Tensor[(64, 1), float32] */;
  %55 = fn (%p016: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p17: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="44313a229d4ac329") -> Tensor[(64, 1), float32] {
    variance(%p016, %p17, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %56 = %55(%52, %54) /* ty=Tensor[(64, 1), float32] */;
  %57 = fn (%p011: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p14: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p21: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p31: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="fcf50e84059cdffd") -> Tensor[(64, 1), float32] {
    %35 = add(%p21, 1e-05f /* ty=float32 */) /* ty=Tensor[(64, 1), float32] */;
    %36 = subtract(%p011, %p14) /* ty=Tensor[(64, 1), float32] */;
    %37 = sqrt(%35) /* ty=Tensor[(64, 1), float32] */;
    %38 = divide(%36, %37) /* ty=Tensor[(64, 1), float32] */;
    multiply(%38, %p31) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32], Tensor[(64, 1), float32], Tensor[(1), float32]) -> Tensor[(64, 1), float32] */;
  %58 = %57(%52, %54, %56, %px4) /* ty=Tensor[(64, 1), float32] */;
  %59 = fn (%p010: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p13: Tensor[(16, 1), float32] /* ty=Tensor[(16, 1), float32] */, Primitive=1, hash="e0aeeba05b40e3a7") -> Tensor[(64, 16), float32] {
    nn.dense(%p010, %p13, units=16) /* ty=Tensor[(64, 16), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(16, 1), float32]) -> Tensor[(64, 16), float32] */;
  %60 = %59(%58, %px6) /* ty=Tensor[(64, 16), float32] */;
  %61 = fn (%p09: Tensor[(64, 16), float32] /* ty=Tensor[(64, 16), float32] */, Primitive=1, hash="13fd3f67b40d7582") -> Tensor[(64, 16), float32] {
    transpose(%p09, axes=[0, 1]) /* ty=Tensor[(64, 16), float32] */
  } /* ty=fn (Tensor[(64, 16), float32]) -> Tensor[(64, 16), float32] */;
  %62 = %26(%25) /* ty=Tensor[(64), float32] */;
  %63 = %34(%33, %px7) /* ty=Tensor[(64, 1), float32] */;
  %64 = %61(%60) /* ty=Tensor[(64, 16), float32] */;
  (%62, %63, %64) /* ty=(Tensor[(64), float32], Tensor[(64, 1), float32], Tensor[(64, 16), float32]) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant", 
        "VirtualDevice"
      ], 
      "data": [2, 11]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "8", 
        "data": "0", 
        "span": "6", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "27", 
        "end_column": "45", 
        "end_line": "6", 
        "line": "6", 
        "source_name": "7"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "9", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [10]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "3"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [12]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "24", 
        "target": "13", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "20", 
        "features": "22", 
        "host": "23", 
        "keys": "19", 
        "kind": "14", 
        "tag": "18"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "16", 
        "name": "15"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [17]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [17]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [21]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "20", 
        "features": "22", 
        "host": "0", 
        "keys": "19", 
        "kind": "14", 
        "tag": "18"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQADAAAAAAAAAAwAAAAAAAAAzsA7Pzu0LT8BD0k/"
  ], 
  "attrs": {"tvm_version": "0.16.0"}
}
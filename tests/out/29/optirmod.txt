#[version = "0.0.5"]
def @main(%pzx : Tensor[(64, 4), float32] /* ty=Tensor[(64, 4), float32] span=from_string:3:17 */, %pzweight : Tensor[(3, 4), float32] /* ty=Tensor[(3, 4), float32] span=from_string:3:23 */, %pzin_bias : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:16 */, %px1 : Tensor[(1, 1), float32] /* ty=Tensor[(1, 1), float32] span=from_string:26:23 */, %px2 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:29:28 */, %px3 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:29:34 */, %px4 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:34:28 */, %px5 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:34:34 */, %px6 : Tensor[(16, 1), float32] /* ty=Tensor[(16, 1), float32] span=from_string:35:23 */, %px7 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:37:26 */, hash="a09328aaa8c647a5", src_layout="NC", dst_layout="NC8n", ) -> (Tensor[(64), float32], Tensor[(64, 1), float32], Tensor[(64, 16), float32]) {
  %18 = fn (%p06: Tensor[(3, 4), float32] /* ty=Tensor[(3, 4), float32] */, %p11: Tensor[(3, 1), float32] /* ty=Tensor[(3, 1), float32] */, Primitive=1, hash="6311b209ee0e8190", src_layout="NC", dst_layout="NC3n") -> Tensor[(1, 4, 3), float32] {
    %17 = multiply(%p06, %p11) /* ty=Tensor[(3, 4), float32] */;
    layout_transform(%17, src_layout="NC", dst_layout="NC3n") /* ty=Tensor[(1, 4, 3), float32] */
  } /* ty=fn (Tensor[(3, 4), float32], Tensor[(3, 1), float32]) -> Tensor[(1, 4, 3), float32] */;
  %19 = %18(%pzweight, meta[relay.Constant][0] /* ty=Tensor[(3, 1), float32] */) /* ty=Tensor[(1, 4, 3), float32] */;
  %20 = fn (%p05: Tensor[(64, 4), float32] /* ty=Tensor[(64, 4), float32] */, %p1: Tensor[(1, 4, 3), float32] /* ty=Tensor[(1, 4, 3), float32] */, %p2: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p3: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, Primitive=1, hash="49193a2783423cea", weight_layout="NC3n") -> Tensor[(64, 3), float32] {
    %13 = multiply(%p2, %p3) /* ty=Tensor[(3), float32] */;
    %14 = nn.contrib_dense_pack(%p05, %p1, meta[relay.attrs.DensePackAttrs][0]) /* ty=Tensor[(64, 3), float32] */;
    %15 = expand_dims(%13, axis=0) /* ty=Tensor[(1, 3), float32] */;
    %16 = add(%14, %15) /* ty=Tensor[(64, 3), float32] */;
    nn.relu(%16) /* ty=Tensor[(64, 3), float32] */
  } /* ty=fn (Tensor[(64, 4), float32], Tensor[(1, 4, 3), float32], Tensor[(3), float32], Tensor[(3), float32]) -> Tensor[(64, 3), float32] */;
  %21 = %20(%pzx, %19, %pzin_bias, meta[relay.Constant][1] /* ty=Tensor[(3), float32] span=from_string:6:27 */) /* ty=Tensor[(64, 3), float32] */;
  %22 = fn (%p04: Tensor[(64, 3), float32] /* ty=Tensor[(64, 3), float32] */, Primitive=1, hash="c0e656f98d622731") -> Tensor[(64, 12), float32] {
    %7 = negative(%p04) /* ty=Tensor[(64, 3), float32] */;
    %8 = divide(%7, %p04) /* ty=Tensor[(64, 3), float32] */;
    %9 = nn.relu(%8) /* ty=Tensor[(64, 3), float32] */;
    %10 = sigmoid(%7) /* ty=Tensor[(64, 3), float32] */;
    %11 = add(%9, %10) /* ty=Tensor[(64, 3), float32] */;
    %12 = (%9, %11, %8, %11) /* ty=(Tensor[(64, 3), float32], Tensor[(64, 3), float32], Tensor[(64, 3), float32], Tensor[(64, 3), float32]) span=from_string:13:21 */;
    concatenate(%12, axis=1) /* ty=Tensor[(64, 12), float32] */
  } /* ty=fn (Tensor[(64, 3), float32]) -> Tensor[(64, 12), float32] */;
  %23 = %22(%21) /* ty=Tensor[(64, 12), float32] */;
  %24 = fn (%p03: Tensor[(64, 12), float32] /* ty=Tensor[(64, 12), float32] */, Primitive=1, hash="303b4987f5423664") -> Tensor[(64, 12), float32] {
    %6 = nn.fast_softmax(%p03, axis=1) /* ty=Tensor[(64, 12), float32] */;
    sin(%6) /* ty=Tensor[(64, 12), float32] */
  } /* ty=fn (Tensor[(64, 12), float32]) -> Tensor[(64, 12), float32] */;
  %25 = %24(%23) /* ty=Tensor[(64, 12), float32] */;
  %26 = fn (%p02: Tensor[(64, 12), float32] /* ty=Tensor[(64, 12), float32] */, Primitive=1, relay.reshape_only=1, hash="797b3671e8b59b52") -> Tensor[(64, 12), float32] {
    reshape(%p02, newshape=[64, 12]) /* ty=Tensor[(64, 12), float32] */
  } /* ty=fn (Tensor[(64, 12), float32]) -> Tensor[(64, 12), float32] */;
  %27 = %26(%25) /* ty=Tensor[(64, 12), float32] */;
  %28 = fn (%p01: Tensor[(64, 12), float32] /* ty=Tensor[(64, 12), float32] */, Primitive=1, hash="c6f28f5359b731fd") -> Tensor[(64), float32] {
    max(%p01, axis=[1]) /* ty=Tensor[(64), float32] */
  } /* ty=fn (Tensor[(64, 12), float32]) -> Tensor[(64), float32] */;
  %29 = %28(%27) /* ty=Tensor[(64), float32] */;
  %30 = fn (%p0: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1, hash="84eccc309f42a48d") -> Tensor[(64), float32] {
    %0 = sigmoid(%p0) /* ty=Tensor[(64), float32] */;
    %1 = nn.relu(%0) /* ty=Tensor[(64), float32] */;
    %2 = sigmoid(%1) /* ty=Tensor[(64), float32] */;
    %3 = cos(%2) /* ty=Tensor[(64), float32] */;
    %4 = tan(%3) /* ty=Tensor[(64), float32] */;
    %5 = fast_exp(%4) /* ty=Tensor[(64), float32] */;
    sin(%5) /* ty=Tensor[(64), float32] */
  } /* ty=fn (Tensor[(64), float32]) -> Tensor[(64), float32] */;
  %34 = fn (%p09: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, Primitive=1, hash="c4dba4a15d52e5a0") -> Tensor[(64, 1), float32] {
    %33 = sin(%p09) /* ty=Tensor[(64), float32] */;
    reshape(%33, newshape=[64, 1]) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64), float32]) -> Tensor[(64, 1), float32] */;
  %35 = fn (%p010: Tensor[(1, 1), float32] /* ty=Tensor[(1, 1), float32] */, Primitive=1, hash="eccb3041c9cca53f", src_layout="NC", dst_layout="NC1n") -> Tensor[(1, 1, 1), float32] {
    layout_transform(%p010, src_layout="NC", dst_layout="NC1n") /* ty=Tensor[(1, 1, 1), float32] */
  } /* ty=fn (Tensor[(1, 1), float32]) -> Tensor[(1, 1, 1), float32] */;
  %36 = %34(%29) /* ty=Tensor[(64, 1), float32] */;
  %37 = %35(%px1) /* ty=Tensor[(1, 1, 1), float32] */;
  %38 = fn (%p08: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p13: Tensor[(1, 1, 1), float32] /* ty=Tensor[(1, 1, 1), float32] */, Primitive=1, hash="65512c21e7d91cab", weight_layout="NC1n") -> Tensor[(64, 1), float32] {
    %31 = nn.contrib_dense_pack(%p08, %p13, meta[relay.attrs.DensePackAttrs][1]) /* ty=Tensor[(64, 1), float32] */;
    %32 = abs(%31) /* ty=Tensor[(64, 1), float32] */;
    abs(%32) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(1, 1, 1), float32]) -> Tensor[(64, 1), float32] */;
  %39 = %38(%36, %37) /* ty=Tensor[(64, 1), float32] */;
  %40 = fn (%p07: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p12: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="a5827bb4c1a239bd") -> Tensor[(64, 1), float32] {
    add(%p07, %p12) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(1), float32]) -> Tensor[(64, 1), float32] */;
  %52 = fn (%p015: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="9e68f00b7b357188") -> Tensor[(64, 1), float32] {
    mean(%p015, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %53 = %52(%39) /* ty=Tensor[(64, 1), float32] */;
  %54 = fn (%p016: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p17: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="44313a229d4ac329") -> Tensor[(64, 1), float32] {
    variance(%p016, %p17, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %55 = %54(%39, %53) /* ty=Tensor[(64, 1), float32] */;
  %56 = fn (%p014: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p16: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p22: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p31: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="ac0cef0aa0b6f17c") -> Tensor[(64, 1), float32] {
    %44 = add(%p22, 1e-05f /* ty=float32 */) /* ty=Tensor[(64, 1), float32] */;
    %45 = subtract(%p014, %p16) /* ty=Tensor[(64, 1), float32] */;
    %46 = sqrt(%44) /* ty=Tensor[(64, 1), float32] */;
    %47 = divide(%45, %46) /* ty=Tensor[(64, 1), float32] */;
    %48 = multiply(%47, %p31) /* ty=Tensor[(64, 1), float32] */;
    %49 = nn.batch_flatten(%48) /* ty=Tensor[(64, 1), float32] */;
    %50 = negative(%49) /* ty=Tensor[(64, 1), float32] */;
    %51 = split(%50, indices_or_sections=[], axis=1) /* ty=(Tensor[(64, 1), float32],) */;
    %51.0 /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32], Tensor[(64, 1), float32], Tensor[(1), float32]) -> Tensor[(64, 1), float32] */;
  %57 = %56(%39, %53, %55, %px2) /* ty=Tensor[(64, 1), float32] */;
  %58 = fn (%p017: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="9e68f00b7b357188") -> Tensor[(64, 1), float32] {
    mean(%p017, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %59 = %58(%57) /* ty=Tensor[(64, 1), float32] */;
  %60 = fn (%p018: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p18: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="44313a229d4ac329") -> Tensor[(64, 1), float32] {
    variance(%p018, %p18, axis=[1], keepdims=True) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %61 = %60(%57, %59) /* ty=Tensor[(64, 1), float32] */;
  %62 = fn (%p013: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p15: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p21: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, Primitive=1, hash="26a24b092ecbbd4f") -> Tensor[(64, 1), float32] {
    %41 = add(%p21, 1e-05f /* ty=float32 */) /* ty=Tensor[(64, 1), float32] */;
    %42 = subtract(%p013, %p15) /* ty=Tensor[(64, 1), float32] */;
    %43 = sqrt(%41) /* ty=Tensor[(64, 1), float32] */;
    divide(%42, %43) /* ty=Tensor[(64, 1), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(64, 1), float32], Tensor[(64, 1), float32]) -> Tensor[(64, 1), float32] */;
  %64 = fn (%p019: Tensor[(16, 1), float32] /* ty=Tensor[(16, 1), float32] */, %p19: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, Primitive=1, hash="9ff0577477cc3bc0", src_layout="NC", dst_layout="NC8n") -> Tensor[(2, 1, 8), float32] {
    %63 = multiply(%p019, %p19) /* ty=Tensor[(16, 1), float32] */;
    layout_transform(%63, src_layout="NC", dst_layout="NC8n") /* ty=Tensor[(2, 1, 8), float32] */
  } /* ty=fn (Tensor[(16, 1), float32], Tensor[(1), float32]) -> Tensor[(2, 1, 8), float32] */;
  %65 = %62(%57, %59, %61) /* ty=Tensor[(64, 1), float32] */;
  %66 = %64(%px6, %px4) /* ty=Tensor[(2, 1, 8), float32] */;
  %67 = fn (%p012: Tensor[(64, 1), float32] /* ty=Tensor[(64, 1), float32] */, %p14: Tensor[(2, 1, 8), float32] /* ty=Tensor[(2, 1, 8), float32] */, Primitive=1, hash="89c83fe3ddbecfc7", weight_layout="NC8n") -> Tensor[(64, 16), float32] {
    nn.contrib_dense_pack(%p012, %p14, meta[relay.attrs.DensePackAttrs][2]) /* ty=Tensor[(64, 16), float32] */
  } /* ty=fn (Tensor[(64, 1), float32], Tensor[(2, 1, 8), float32]) -> Tensor[(64, 16), float32] */;
  %68 = %67(%65, %66) /* ty=Tensor[(64, 16), float32] */;
  %69 = fn (%p011: Tensor[(64, 16), float32] /* ty=Tensor[(64, 16), float32] */, Primitive=1, hash="13fd3f67b40d7582") -> Tensor[(64, 16), float32] {
    transpose(%p011, axes=[0, 1]) /* ty=Tensor[(64, 16), float32] */
  } /* ty=fn (Tensor[(64, 16), float32]) -> Tensor[(64, 16), float32] */;
  %70 = %30(%29) /* ty=Tensor[(64), float32] */;
  %71 = %40(%39, %px7) /* ty=Tensor[(64, 1), float32] */;
  %72 = %69(%68) /* ty=Tensor[(64, 16), float32] */;
  (%70, %71, %72) /* ty=(Tensor[(64), float32], Tensor[(64, 1), float32], Tensor[(64, 16), float32]) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant", 
        "relay.attrs.DensePackAttrs", 
        "VirtualDevice"
      ], 
      "data": [2, 18, 25]
    }, 
    {
      "type_key": "Array", 
      "data": [3, 10]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "6", 
        "data": "0", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "7", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [8, 9]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "3"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "15", 
        "data": "1", 
        "span": "13", 
        "virtual_device_": "11"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "12", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Span", 
      "attrs": {
        "column": "27", 
        "end_column": "45", 
        "end_line": "6", 
        "line": "6", 
        "source_name": "14"
      }
    }, 
    {
      "type_key": "SourceName", 
      "repr_str": "from_string"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "16", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [17]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "3"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [19, 21, 23]
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "20"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC3n"
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "22"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC1n"
    }, 
    {
      "type_key": "relay.attrs.DensePackAttrs", 
      "attrs": {
        "out_dtype": "float32", 
        "units": "0", 
        "weight_layout": "24"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "NC8n"
    }, 
    {
      "type_key": "Array", 
      "data": [26]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "38", 
        "target": "27", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "34", 
        "features": "36", 
        "host": "37", 
        "keys": "33", 
        "kind": "28", 
        "tag": "32"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "30", 
        "name": "29"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [31]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [31]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [35]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "34", 
        "features": "36", 
        "host": "0", 
        "keys": "33", 
        "kind": "28", 
        "tag": "32"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAgAAAAIgAQADAAAAAAAAAAEAAAAAAAAADAAAAAAAAADOwDs/O7QtPwEPST8=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAIgAQADAAAAAAAAAAwAAAAAAAAAzsA7Pzu0LT8BD0k/"
  ], 
  "attrs": {"tvm_version": "0.16.0"}
}
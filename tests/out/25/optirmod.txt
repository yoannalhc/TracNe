#[version = "0.0.5"]
def @main(%pzx : Tensor[(2, 4, 40, 10, 10), float32] /* ty=Tensor[(2, 4, 40, 10, 10), float32] span=from_string:3:18 */, %pzweight : Tensor[(2, 4, 3, 3, 3), float32] /* ty=Tensor[(2, 4, 3, 3, 3), float32] span=from_string:6:22 */, %pzin_bias : Tensor[(4, 1, 1, 1), float32] /* ty=Tensor[(4, 1, 1, 1), float32] span=from_string:5:16 */, %px1 : Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:12:31 */, %px2 : Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:12:37 */, %px3 : Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:10:26 */, %px4 : Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:10:32 */, %px5 : Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:10:38 */, %px6 : Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:10:44 */, %px7 : Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:14:28 */, %px8 : Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:14:34 */, %px9 : Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:14:40 */, %px10 : Tensor[(2), float32] /* ty=Tensor[(2), float32] span=from_string:14:46 */, %px11 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:19:28 */, %px12 : Tensor[(1), float32] /* ty=Tensor[(1), float32] span=from_string:19:35 */, hash="90dcea7312521eb9", ) -> (Tensor[(2, 20), float32],) {
  %42 = fn (%p05: Tensor[(2, 4, 40, 10, 10), float32] /* ty=Tensor[(2, 4, 40, 10, 10), float32] */, %p13: Tensor[(4, 1, 1, 1), float32] /* ty=Tensor[(4, 1, 1, 1), float32] */, %p22: Tensor[(4, 1, 1, 1), float32] /* ty=Tensor[(4, 1, 1, 1), float32] */, Primitive=1, hash="c203e77a1a6a5aa2") -> Tensor[(2, 4, 40, 10, 10), float32] {
    %40 = nn.relu(%p05) /* ty=Tensor[(2, 4, 40, 10, 10), float32] */;
    %41 = divide(%p13, %p22) /* ty=Tensor[(4, 1, 1, 1), float32] */;
    add(%40, %41) /* ty=Tensor[(2, 4, 40, 10, 10), float32] */
  } /* ty=fn (Tensor[(2, 4, 40, 10, 10), float32], Tensor[(4, 1, 1, 1), float32], Tensor[(4, 1, 1, 1), float32]) -> Tensor[(2, 4, 40, 10, 10), float32] */;
  %43 = fn (%p06: Tensor[(2, 4, 3, 3, 3), float32] /* ty=Tensor[(2, 4, 3, 3, 3), float32] */, %p14: Tensor[(4, 1, 1, 1), float32] /* ty=Tensor[(4, 1, 1, 1), float32] */, Primitive=1, hash="49e4abc5aa419f27") -> Tensor[(2, 4, 3, 3, 3), float32] {
    multiply(%p06, %p14) /* ty=Tensor[(2, 4, 3, 3, 3), float32] */
  } /* ty=fn (Tensor[(2, 4, 3, 3, 3), float32], Tensor[(4, 1, 1, 1), float32]) -> Tensor[(2, 4, 3, 3, 3), float32] */;
  %44 = %42(%pzx, %pzin_bias, meta[relay.Constant][0] /* ty=Tensor[(4, 1, 1, 1), float32] */) /* ty=Tensor[(2, 4, 40, 10, 10), float32] */;
  %45 = %43(%pzweight, meta[relay.Constant][1] /* ty=Tensor[(4, 1, 1, 1), float32] */) /* ty=Tensor[(2, 4, 3, 3, 3), float32] */;
  %46 = fn (%p04: Tensor[(2, 4, 40, 10, 10), float32] /* ty=Tensor[(2, 4, 40, 10, 10), float32] */, %p12: Tensor[(2, 4, 3, 3, 3), float32] /* ty=Tensor[(2, 4, 3, 3, 3), float32] */, Primitive=1, hash="0aeb3c46e0c8b532", kernel_layout="OIDHW", data_layout="NCDHW", out_layout="") -> Tensor[(2, 2, 40, 10, 10), float32] {
    nn.conv3d(%p04, %p12, padding=[1, 1, 1, 1, 1, 1], channels=2, kernel_size=[3, 3, 3]) /* ty=Tensor[(2, 2, 40, 10, 10), float32] */
  } /* ty=fn (Tensor[(2, 4, 40, 10, 10), float32], Tensor[(2, 4, 3, 3, 3), float32]) -> Tensor[(2, 2, 40, 10, 10), float32] */;
  %47 = %46(%44, %45) /* ty=Tensor[(2, 2, 40, 10, 10), float32] */;
  %48 = fn (%p03: Tensor[(2, 2, 40, 10, 10), float32] /* ty=Tensor[(2, 2, 40, 10, 10), float32] */, Primitive=1, hash="b5247ad12485b6a5") -> Tensor[(2, 2, 10), float32] {
    sum(%p03, axis=[2, 4]) /* ty=Tensor[(2, 2, 10), float32] */
  } /* ty=fn (Tensor[(2, 2, 40, 10, 10), float32]) -> Tensor[(2, 2, 10), float32] */;
  %58 = %48(%47) /* ty=Tensor[(2, 2, 10), float32] */;
  %59 = fn (%p08: Tensor[(2, 2, 10), float32] /* ty=Tensor[(2, 2, 10), float32] */, Primitive=1, hash="8f31263755ddf937") -> Tensor[(2, 2, 1), float32] {
    mean(%p08, axis=[2], keepdims=True) /* ty=Tensor[(2, 2, 1), float32] */
  } /* ty=fn (Tensor[(2, 2, 10), float32]) -> Tensor[(2, 2, 1), float32] */;
  %60 = %59(%58) /* ty=Tensor[(2, 2, 1), float32] */;
  %61 = fn (%p09: Tensor[(2, 2, 10), float32] /* ty=Tensor[(2, 2, 10), float32] */, %p16: Tensor[(2, 2, 1), float32] /* ty=Tensor[(2, 2, 1), float32] */, Primitive=1, hash="31520dded146a505") -> Tensor[(2, 2, 1), float32] {
    variance(%p09, %p16, axis=[2], keepdims=True) /* ty=Tensor[(2, 2, 1), float32] */
  } /* ty=fn (Tensor[(2, 2, 10), float32], Tensor[(2, 2, 1), float32]) -> Tensor[(2, 2, 1), float32] */;
  %62 = %61(%58, %60) /* ty=Tensor[(2, 2, 1), float32] */;
  %63 = fn (%p07: Tensor[(2, 2, 10), float32] /* ty=Tensor[(2, 2, 10), float32] */, %p15: Tensor[(2, 2, 1), float32] /* ty=Tensor[(2, 2, 1), float32] */, %p23: Tensor[(2, 2, 1), float32] /* ty=Tensor[(2, 2, 1), float32] */, %p32: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %p42: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, Primitive=1, hash="c4c48db22a537aae") -> Tensor[(2, 2, 10), float32] {
    %49 = add(%p23, 1e-05f /* ty=float32 */) /* ty=Tensor[(2, 2, 1), float32] */;
    %50 = subtract(%p07, %p15) /* ty=Tensor[(2, 2, 10), float32] */;
    %51 = sqrt(%49) /* ty=Tensor[(2, 2, 1), float32] */;
    %52 = expand_dims(%p32, axis=1) /* ty=Tensor[(2, 1), float32] */;
    %53 = divide(%50, %51) /* ty=Tensor[(2, 2, 10), float32] */;
    %54 = expand_dims(%52, axis=0) /* ty=Tensor[(1, 2, 1), float32] */;
    %55 = expand_dims(%p42, axis=1) /* ty=Tensor[(2, 1), float32] */;
    %56 = multiply(%53, %54) /* ty=Tensor[(2, 2, 10), float32] */;
    %57 = expand_dims(%55, axis=0) /* ty=Tensor[(1, 2, 1), float32] */;
    add(%56, %57) /* ty=Tensor[(2, 2, 10), float32] */
  } /* ty=fn (Tensor[(2, 2, 10), float32], Tensor[(2, 2, 1), float32], Tensor[(2, 2, 1), float32], Tensor[(2), float32], Tensor[(2), float32]) -> Tensor[(2, 2, 10), float32] */;
  %64 = %63(%58, %60, %62, %px1, %px2) /* ty=Tensor[(2, 2, 10), float32] */;
  %65 = fn (%p02: Tensor[(2, 2, 10), float32] /* ty=Tensor[(2, 2, 10), float32] */, %p11: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %p21: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %p31: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %p41: Tensor[(2, 2, 10), float32] /* ty=Tensor[(2, 2, 10), float32] */, %p51: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %p6: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, Primitive=1, hash="25ae58486b6eea3a") -> Tensor[(2, 2, 10), float32] {
    %15 = expand_dims(%p02, axis=2, num_newaxis=0) /* ty=Tensor[(2, 2, 10), float32] */;
    %16 = add(%p11, 1e-05f /* ty=float32 */) /* ty=Tensor[(2), float32] */;
    %17 = sqrt(%16) /* ty=Tensor[(2), float32] */;
    %18 = divide(1f /* ty=float32 */, %17) /* ty=Tensor[(2), float32] */;
    %19 = multiply(%18, %p21) /* ty=Tensor[(2), float32] */;
    %20 = sin(%15) /* ty=Tensor[(2, 2, 10), float32] */;
    %21 = expand_dims(%19, axis=1) /* ty=Tensor[(2, 1), float32] */;
    %22 = negative(%p31) /* ty=Tensor[(2), float32] */;
    %23 = multiply(%22, %19) /* ty=Tensor[(2), float32] */;
    %24 = multiply(%20, %21) /* ty=Tensor[(2, 2, 10), float32] */;
    %25 = expand_dims(%23, axis=1) /* ty=Tensor[(2, 1), float32] */;
    %26 = add(%24, %25) /* ty=Tensor[(2, 2, 10), float32] */;
    %27 = add(%p51, 1e-05f /* ty=float32 */) /* ty=Tensor[(2), float32] */;
    %28 = sqrt(%27) /* ty=Tensor[(2), float32] */;
    %29 = divide(1f /* ty=float32 */, %28) /* ty=Tensor[(2), float32] */;
    %30 = expand_dims(%29, axis=1) /* ty=Tensor[(2, 1), float32] */;
    %31 = add(%26, %p41) /* ty=Tensor[(2, 2, 10), float32] */;
    %32 = expand_dims(%30, axis=0) /* ty=Tensor[(1, 2, 1), float32] */;
    %33 = negative(%p6) /* ty=Tensor[(2), float32] */;
    %34 = multiply(%33, %29) /* ty=Tensor[(2), float32] */;
    %35 = expand_dims(%34, axis=1) /* ty=Tensor[(2, 1), float32] */;
    %36 = multiply(%31, %32) /* ty=Tensor[(2, 2, 10), float32] */;
    %37 = expand_dims(%35, axis=0) /* ty=Tensor[(1, 2, 1), float32] */;
    %38 = add(%36, %37) /* ty=Tensor[(2, 2, 10), float32] */;
    %39 = minimum(%15, %38) /* ty=Tensor[(2, 2, 10), float32] */;
    cos(%39) /* ty=Tensor[(2, 2, 10), float32] */
  } /* ty=fn (Tensor[(2, 2, 10), float32], Tensor[(2), float32], Tensor[(2), float32], Tensor[(2), float32], Tensor[(2, 2, 10), float32], Tensor[(2), float32], Tensor[(2), float32]) -> Tensor[(2, 2, 10), float32] */;
  %66 = %65(%58, %px6, %px3, %px5, %64, %px10, %px9) /* ty=Tensor[(2, 2, 10), float32] */;
  %67 = fn (%p01: Tensor[(2, 2, 10), float32] /* ty=Tensor[(2, 2, 10), float32] */, Primitive=1, hash="665244769583fac2") -> Tensor[(2, 1, 10), float32] {
    sum(%p01, axis=[1], keepdims=True) /* ty=Tensor[(2, 1, 10), float32] */
  } /* ty=fn (Tensor[(2, 2, 10), float32]) -> Tensor[(2, 1, 10), float32] */;
  %68 = %67(%66) /* ty=Tensor[(2, 1, 10), float32] */;
  %69 = fn (%p010: Tensor[(2, 1, 10), float32] /* ty=Tensor[(2, 1, 10), float32] */, Primitive=1, hash="740c3316c9594868") -> Tensor[(2, 1, 10), float32] {
    mean(%p010, axis=[1], keepdims=True) /* ty=Tensor[(2, 1, 10), float32] */
  } /* ty=fn (Tensor[(2, 1, 10), float32]) -> Tensor[(2, 1, 10), float32] */;
  %70 = %69(%68) /* ty=Tensor[(2, 1, 10), float32] */;
  %71 = fn (%p011: Tensor[(2, 1, 10), float32] /* ty=Tensor[(2, 1, 10), float32] */, %p17: Tensor[(2, 1, 10), float32] /* ty=Tensor[(2, 1, 10), float32] */, Primitive=1, hash="10058e3b28c7575f") -> Tensor[(2, 1, 10), float32] {
    variance(%p011, %p17, axis=[1], keepdims=True) /* ty=Tensor[(2, 1, 10), float32] */
  } /* ty=fn (Tensor[(2, 1, 10), float32], Tensor[(2, 1, 10), float32]) -> Tensor[(2, 1, 10), float32] */;
  %72 = %71(%68, %70) /* ty=Tensor[(2, 1, 10), float32] */;
  %73 = fn (%p0: Tensor[(2, 1, 10), float32] /* ty=Tensor[(2, 1, 10), float32] */, %p1: Tensor[(2, 1, 10), float32] /* ty=Tensor[(2, 1, 10), float32] */, %p2: Tensor[(2, 1, 10), float32] /* ty=Tensor[(2, 1, 10), float32] */, %p3: Tensor[(1), float32] /* ty=Tensor[(1), float32] */, %p4: Tensor[(2, 2, 10), float32] /* ty=Tensor[(2, 2, 10), float32] */, %p5: Tensor[(2, 2, 10), float32] /* ty=Tensor[(2, 2, 10), float32] */, Primitive=1, hash="c8fa88b01d953524") -> Tensor[(2, 20), float32] {
    %0 = add(%p2, 1e-05f /* ty=float32 */) /* ty=Tensor[(2, 1, 10), float32] */;
    %1 = subtract(%p0, %p1) /* ty=Tensor[(2, 1, 10), float32] */;
    %2 = sqrt(%0) /* ty=Tensor[(2, 1, 10), float32] */;
    %3 = divide(%1, %2) /* ty=Tensor[(2, 1, 10), float32] */;
    %4 = expand_dims(%p3, axis=1) /* ty=Tensor[(1, 1), float32] */;
    %5 = add(%3, %4) /* ty=Tensor[(2, 1, 10), float32] */;
    %6 = ceil(%5) /* ty=Tensor[(2, 1, 10), float32] */;
    %7 = abs(%6) /* ty=Tensor[(2, 1, 10), float32] */;
    %8 = negative(%7) /* ty=Tensor[(2, 1, 10), float32] */;
    %9 = minimum(%8, %p0) /* ty=Tensor[(2, 1, 10), float32] */;
    %10 = minimum(%9, %p4) /* ty=Tensor[(2, 2, 10), float32] */;
    %11 = subtract(%10, %p5) /* ty=Tensor[(2, 2, 10), float32] */;
    %12 = nn.batch_flatten(%11) /* ty=Tensor[(2, 20), float32] */;
    %13 = nn.relu(%12) /* ty=Tensor[(2, 20), float32] */;
    %14 = add(%13, %13) /* ty=Tensor[(2, 20), float32] */;
    tan(%14) /* ty=Tensor[(2, 20), float32] */
  } /* ty=fn (Tensor[(2, 1, 10), float32], Tensor[(2, 1, 10), float32], Tensor[(2, 1, 10), float32], Tensor[(1), float32], Tensor[(2, 2, 10), float32], Tensor[(2, 2, 10), float32]) -> Tensor[(2, 20), float32] */;
  %74 = %73(%68, %70, %72, %px12, %66, %64) /* ty=Tensor[(2, 20), float32] */;
  (%74,) /* ty=(Tensor[(2, 20), float32],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant", 
        "VirtualDevice"
      ], 
      "data": [2, 19]
    }, 
    {
      "type_key": "Array", 
      "data": [3, 12]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "6", 
        "data": "0", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "7", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [8, 9, 10, 11]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "13", 
        "data": "1", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "14", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [15, 16, 17, 18]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "4"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [20]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "32", 
        "target": "21", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "28", 
        "features": "30", 
        "host": "31", 
        "keys": "27", 
        "kind": "22", 
        "tag": "26"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "24", 
        "name": "23"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [25]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [25]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [29]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "28", 
        "features": "30", 
        "host": "0", 
        "keys": "27", 
        "kind": "22", 
        "tag": "26"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAABAAAAAIgAQAEAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAABAAAAAAAAAA4x4hP1gtbj+wVCc/TYsMPw==", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAABAAAAAIgAQAEAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAABAAAAAAAAAA4x4hP1gtbj+wVCc/TYsMPw=="
  ], 
  "attrs": {"tvm_version": "0.16.0"}
}
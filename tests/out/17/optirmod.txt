#[version = "0.0.5"]
def @main(%pzdata : Tensor[(2, 3, 64, 16), float32] /* ty=Tensor[(2, 3, 64, 16), float32] span=from_string:3:18 */, %pzgraph_conv_weight : Tensor[(3, 3, 3, 3), float32] /* ty=Tensor[(3, 3, 3, 3), float32] span=from_string:3:27 */, %pzgraph_bn_gamma : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:26 */, %pzgraph_bn_beta : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:45 */, %pzgraph_bn_moving_mean : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:63 */, %pzgraph_bn_moving_var : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:4:88 */, hash="75d4a122efa9bc51", src_layout="NCHW", dst_layout="NCHW3c", ) -> (Tensor[(2), float32],) {
  %12 = fn (%p04: Tensor[(2, 3, 64, 16), float32] /* ty=Tensor[(2, 3, 64, 16), float32] */, Primitive=1, hash="cb80f6757accf20b", src_layout="NCHW", dst_layout="NCHW3c") -> Tensor[(2, 1, 64, 16, 3), float32] {
    layout_transform(%p04, src_layout="NCHW", dst_layout="NCHW3c") /* ty=Tensor[(2, 1, 64, 16, 3), float32] */
  } /* ty=fn (Tensor[(2, 3, 64, 16), float32]) -> Tensor[(2, 1, 64, 16, 3), float32] */;
  %20 = fn (%p06: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p12: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, Primitive=1, hash="5e573744016ac88f") -> Tensor[(3), float32] {
    %17 = add(%p06, 1e-05f /* ty=float32 */) /* ty=Tensor[(3), float32] */;
    %18 = sqrt(%17) /* ty=Tensor[(3), float32] */;
    %19 = divide(1f /* ty=float32 */, %18) /* ty=Tensor[(3), float32] */;
    multiply(%19, %p12) /* ty=Tensor[(3), float32] */
  } /* ty=fn (Tensor[(3), float32], Tensor[(3), float32]) -> Tensor[(3), float32] */;
  %21 = %20(%pzgraph_bn_moving_var, %pzgraph_bn_gamma) /* ty=Tensor[(3), float32] */;
  %22 = fn (%p05: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p11: Tensor[(3, 3, 3, 3), float32] /* ty=Tensor[(3, 3, 3, 3), float32] */, Primitive=1, hash="861a0a021557e9e3", src_layout="OIHW", dst_layout="OIHW3i3o") -> Tensor[(1, 1, 3, 3, 3, 3), float32] {
    %13 = expand_dims(%p05, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
    %14 = squeeze(%13, axis=[1, 2]) /* ty=Tensor[(3), float32] */;
    %15 = expand_dims(%14, axis=1, num_newaxis=3) /* ty=Tensor[(3, 1, 1, 1), float32] */;
    %16 = multiply(%p11, %15) /* ty=Tensor[(3, 3, 3, 3), float32] */;
    layout_transform(%16, src_layout="OIHW", dst_layout="OIHW3i3o") /* ty=Tensor[(1, 1, 3, 3, 3, 3), float32] */
  } /* ty=fn (Tensor[(3), float32], Tensor[(3, 3, 3, 3), float32]) -> Tensor[(1, 1, 3, 3, 3, 3), float32] */;
  %28 = fn (%p07: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p13: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p21: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, Primitive=1, hash="4a93306f27aab36e", src_layout="NCHW", dst_layout="NCHW3c") -> Tensor[(1, 1, 1, 1, 3), float32] {
    %23 = negative(%p07) /* ty=Tensor[(3), float32] */;
    %24 = multiply(%23, %p13) /* ty=Tensor[(3), float32] */;
    %25 = add(%24, %p21) /* ty=Tensor[(3), float32] */;
    %26 = expand_dims(%25, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
    %27 = expand_dims(%26, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
    layout_transform(%27, src_layout="NCHW", dst_layout="NCHW3c") /* ty=Tensor[(1, 1, 1, 1, 3), float32] */
  } /* ty=fn (Tensor[(3), float32], Tensor[(3), float32], Tensor[(3), float32]) -> Tensor[(1, 1, 1, 1, 3), float32] */;
  %29 = %12(%pzdata) /* ty=Tensor[(2, 1, 64, 16, 3), float32] */;
  %30 = %22(%21, %pzgraph_conv_weight) /* ty=Tensor[(1, 1, 3, 3, 3, 3), float32] */;
  %31 = %28(%pzgraph_bn_moving_mean, %21, %pzgraph_bn_beta) /* ty=Tensor[(1, 1, 1, 1, 3), float32] */;
  %32 = fn (%p03: Tensor[(2, 1, 64, 16, 3), float32] /* ty=Tensor[(2, 1, 64, 16, 3), float32] */, %p1: Tensor[(1, 1, 3, 3, 3, 3), float32] /* ty=Tensor[(1, 1, 3, 3, 3, 3), float32] */, %p2: Tensor[(1, 1, 1, 1, 3), float32] /* ty=Tensor[(1, 1, 1, 1, 3), float32] */, Primitive=1, hash="2b6070eec18da712", kernel_layout="OIHW3i3o", data_layout="NCHW3c", out_layout="NCHW3c") -> Tensor[(2, 1, 32, 8, 3), float32] {
    %10 = nn.contrib_conv2d_NCHWc(%p03, %p1, strides=[2, 2], padding=[1, 1, 1, 1], channels=3, kernel_size=[3, 3], data_layout="NCHW3c", kernel_layout="OIHW3i3o", out_layout="NCHW3c") /* ty=Tensor[(2, 1, 32, 8, 3), float32] */;
    %11 = add(%10, %p2) /* ty=Tensor[(2, 1, 32, 8, 3), float32] */;
    nn.relu(%11) /* ty=Tensor[(2, 1, 32, 8, 3), float32] */
  } /* ty=fn (Tensor[(2, 1, 64, 16, 3), float32], Tensor[(1, 1, 3, 3, 3, 3), float32], Tensor[(1, 1, 1, 1, 3), float32]) -> Tensor[(2, 1, 32, 8, 3), float32] */;
  %33 = %32(%29, %30, %31) /* ty=Tensor[(2, 1, 32, 8, 3), float32] */;
  %34 = fn (%p02: Tensor[(2, 1, 32, 8, 3), float32] /* ty=Tensor[(2, 1, 32, 8, 3), float32] */, Primitive=1, hash="aa01578459024bd9") -> Tensor[(2, 1, 3), float32] {
    sum(%p02, axis=[2, 3]) /* ty=Tensor[(2, 1, 3), float32] */
  } /* ty=fn (Tensor[(2, 1, 32, 8, 3), float32]) -> Tensor[(2, 1, 3), float32] */;
  %35 = %34(%33) /* ty=Tensor[(2, 1, 3), float32] */;
  %36 = fn (%p01: Tensor[(2, 1, 3), float32] /* ty=Tensor[(2, 1, 3), float32] */, Primitive=1, hash="edb19fccdf2cf7ff", src_layout="NC3c", dst_layout="NC") -> Tensor[(2), float32] {
    %2 = minimum(%p01, %p01) /* ty=Tensor[(2, 1, 3), float32] */;
    %3 = layout_transform(%2, src_layout="NC3c", dst_layout="NC") /* ty=Tensor[(2, 3), float32] */;
    %4 = sin(%2) /* ty=Tensor[(2, 1, 3), float32] */;
    %5 = maximum(%4, %4) /* ty=Tensor[(2, 1, 3), float32] */;
    %6 = transpose(%3, axes=[0, 1]) /* ty=Tensor[(2, 3), float32] */;
    %7 = layout_transform(%5, src_layout="NC3c", dst_layout="NC") /* ty=Tensor[(2, 3), float32] */;
    %8 = minimum(%6, %7) /* ty=Tensor[(2, 3), float32] */;
    %9 = minimum(%8, %6) /* ty=Tensor[(2, 3), float32] */;
    sum(%9, axis=[1]) /* ty=Tensor[(2), float32] */
  } /* ty=fn (Tensor[(2, 1, 3), float32]) -> Tensor[(2), float32] */;
  %37 = %36(%35) /* ty=Tensor[(2), float32] */;
  %38 = fn (%p0: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, Primitive=1, hash="5c311a7e6aaf6b92") -> Tensor[(2), float32] {
    %0 = nn.relu(%p0) /* ty=Tensor[(2), float32] */;
    %1 = tan(%0) /* ty=Tensor[(2), float32] */;
    abs(%1) /* ty=Tensor[(2), float32] */
  } /* ty=fn (Tensor[(2), float32]) -> Tensor[(2), float32] */;
  %39 = %38(%37) /* ty=Tensor[(2), float32] */;
  (%39,) /* ty=(Tensor[(2), float32],) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "VirtualDevice"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "15", 
        "target": "4", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "14", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "7", 
        "name": "6"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [12]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "0", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.16.0"}
}
#[version = "0.0.5"]
def @main(%x0 : Tensor[(5), float32] /* ty=Tensor[(5), float32] span=from_string:3:13 */, %x1 : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:43:28 */, %x2 : Tensor[(3), float32] /* ty=Tensor[(3), float32] span=from_string:43:33 */, hash="e0432ed2eb3e3859", ) -> (Tensor[(5), float32], Tensor[(5, 5), float32], Tensor[(5, 1), float32]) {
  %15 = fn (%p04: Tensor[(5), float32] /* ty=Tensor[(5), float32] */, Primitive=1, hash="e366c586b1f230ed") -> Tensor[(5), float32] {
    %8 = fast_tanh(%p04) /* ty=Tensor[(5), float32] */;
    %9 = ceil(%8) /* ty=Tensor[(5), float32] */;
    %10 = ceil(%9) /* ty=Tensor[(5), float32] */;
    %11 = abs(%10) /* ty=Tensor[(5), float32] */;
    %12 = fast_exp(%11) /* ty=Tensor[(5), float32] */;
    %13 = fast_tanh(%12) /* ty=Tensor[(5), float32] */;
    %14 = nn.leaky_relu(%13, alpha=0.601844f) /* ty=Tensor[(5), float32] */;
    nn.relu(%14) /* ty=Tensor[(5), float32] */
  } /* ty=fn (Tensor[(5), float32]) -> Tensor[(5), float32] */;
  %16 = %15(%x0) /* ty=Tensor[(5), float32] */;
  %17 = fn (%p03: Tensor[(5), float32] /* ty=Tensor[(5), float32] */, Primitive=1, relay.reshape_only=1, hash="c7865ee2c59d1d83") -> Tensor[(5, 1, 1), float32] {
    reshape(%p03, newshape=[5, 1, 1]) /* ty=Tensor[(5, 1, 1), float32] */
  } /* ty=fn (Tensor[(5), float32]) -> Tensor[(5, 1, 1), float32] */;
  %18 = %17(%16) /* ty=Tensor[(5, 1, 1), float32] */;
  %19 = fn (%p02: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, Primitive=1, hash="cd5ec2ad7aaadcbd", layout="NCW", out_layout="") -> Tensor[(5, 1, 1), float32] {
    %7 = nn.adaptive_max_pool1d(%p02, output_size=[1]) /* ty=Tensor[(5, 1, 1), float32] */;
    minimum(%7, %7) /* ty=Tensor[(5, 1, 1), float32] */
  } /* ty=fn (Tensor[(5, 1, 1), float32]) -> Tensor[(5, 1, 1), float32] */;
  %20 = %19(%18) /* ty=Tensor[(5, 1, 1), float32] */;
  %21 = fn (%p01: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, Primitive=1, hash="4b06a64be18f0dbd") -> Tensor[(5), float32] {
    mean(%p01, axis=[1, 2]) /* ty=Tensor[(5), float32] */
  } /* ty=fn (Tensor[(5, 1, 1), float32]) -> Tensor[(5), float32] */;
  %22 = %21(%20) /* ty=Tensor[(5), float32] */;
  %23 = fn (%p0: Tensor[(5), float32] /* ty=Tensor[(5), float32] */, Primitive=1, hash="150e05b431a7320b") -> Tensor[(5), float32] {
    %0 = sigmoid(%p0) /* ty=Tensor[(5), float32] */;
    %1 = transpose(%0, axes=[0]) /* ty=Tensor[(5), float32] */;
    %2 = floor(%1) /* ty=Tensor[(5), float32] */;
    %3 = tan(%2) /* ty=Tensor[(5), float32] */;
    %4 = sin(%3) /* ty=Tensor[(5), float32] */;
    %5 = round(%4) /* ty=Tensor[(5), float32] */;
    %6 = trunc(%5) /* ty=Tensor[(5), float32] */;
    ceil(%6) /* ty=Tensor[(5), float32] */
  } /* ty=fn (Tensor[(5), float32]) -> Tensor[(5), float32] */;
  %44 = fn (%p015: Tensor[(5), float32] /* ty=Tensor[(5), float32] */, Primitive=1, relay.reshape_only=1, hash="e38710a3ff177265") -> Tensor[(5, 1), float32] {
    reshape(%p015, newshape=[5, 1]) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5), float32]) -> Tensor[(5, 1), float32] */;
  %45 = %44(%16) /* ty=Tensor[(5, 1), float32] */;
  %46 = fn (%p014: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="404bfd6eeeb59072") -> Tensor[(5, 1), float32] {
    floor(%p014) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %47 = %46(%45) /* ty=Tensor[(5, 1), float32] */;
  %48 = fn (%p013: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="855f6f79de60fae0") -> Tensor[(5, 1), float32] {
    ceil(%p013) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %53 = fn (%p018: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="06e3971a3fabbcf3") -> Tensor[(5, 1), float32] {
    nn.relu(%p018) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %54 = %53(%47) /* ty=Tensor[(5, 1), float32] */;
  %55 = fn (%p017: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p14: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="e2a1ae127e2d1ddf") -> Tensor[(5, 1), float32] {
    %49 = reshape(%p017, newshape=[5, 1]) /* ty=Tensor[(5, 1), float32] */;
    %50 = expand_dims(%49, axis=1, num_newaxis=0) /* ty=Tensor[(5, 1), float32] */;
    %51 = minimum(%50, %50) /* ty=Tensor[(5, 1), float32] */;
    %52 = maximum(%51, %p14) /* ty=Tensor[(5, 1), float32] */;
    cos(%52) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %56 = %55(%54, %45) /* ty=Tensor[(5, 1), float32] */;
  %57 = fn (%p016: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="496e37d8e5c0ea87") -> Tensor[(5, 1), float32] {
    transpose(%p016, axes=[0, 1]) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %58 = %48(%47) /* ty=Tensor[(5, 1), float32] */;
  %59 = %57(%56) /* ty=Tensor[(5, 1), float32] */;
  %60 = fn (%p012: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p13: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p23: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="9926017b3dc834a1") -> Tensor[(5, 1), float32] {
    %40 = split(%p012, indices_or_sections=[], axis=1) /* ty=(Tensor[(5, 1), float32],) */;
    %41 = %40.0 /* ty=Tensor[(5, 1), float32] */;
    %42 = minimum(%41, %p13) /* ty=Tensor[(5, 1), float32] */;
    %43 = add(%42, %p23) /* ty=Tensor[(5, 1), float32] */;
    nn.leaky_relu(%43, alpha=0.142823f) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32], Tensor[(5, 1), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %61 = %60(%58, %59, %56) /* ty=Tensor[(5, 1), float32] */;
  %62 = fn (%p011: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p12: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, %p22: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="ae173f5385c0a226") -> Tensor[(5, 3), float32] {
    %39 = (%p011, %p12, %p22) /* ty=(Tensor[(5, 1), float32], Tensor[(5, 1), float32], Tensor[(5, 1), float32]) span=from_string:39:21 */;
    concatenate(%39, axis=1) /* ty=Tensor[(5, 3), float32] */
  } /* ty=fn (Tensor[(5, 1), float32], Tensor[(5, 1), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 3), float32] */;
  %63 = %62(%61, %58, %54) /* ty=Tensor[(5, 3), float32] */;
  %64 = fn (%p010: Tensor[(5, 3), float32] /* ty=Tensor[(5, 3), float32] */, Primitive=1, hash="61af87643066c46e") -> Tensor[(5, 3), float32] {
    fast_exp(%p010) /* ty=Tensor[(5, 3), float32] */
  } /* ty=fn (Tensor[(5, 3), float32]) -> Tensor[(5, 3), float32] */;
  %65 = %64(%63) /* ty=Tensor[(5, 3), float32] */;
  %66 = fn (%p09: Tensor[(5, 3), float32] /* ty=Tensor[(5, 3), float32] */, Primitive=1, hash="c8d0342c05324e1d") -> Tensor[(5, 3), float32] {
    %38 = nn.fast_softmax(%p09, axis=1) /* ty=Tensor[(5, 3), float32] */;
    fast_exp(%38) /* ty=Tensor[(5, 3), float32] */
  } /* ty=fn (Tensor[(5, 3), float32]) -> Tensor[(5, 3), float32] */;
  %67 = %66(%65) /* ty=Tensor[(5, 3), float32] */;
  %68 = fn (%p08: Tensor[(5, 3), float32] /* ty=Tensor[(5, 3), float32] */, Primitive=1, relay.reshape_only=1, hash="d06c15ccf90d8515") -> Tensor[(5, 3, 1), float32] {
    reshape(%p08, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float32] */
  } /* ty=fn (Tensor[(5, 3), float32]) -> Tensor[(5, 3, 1), float32] */;
  %69 = %68(%67) /* ty=Tensor[(5, 3, 1), float32] */;
  %70 = fn (%p019: Tensor[(5, 3, 1), float32] /* ty=Tensor[(5, 3, 1), float32] */, Primitive=1, hash="bbe1969c2e23eb06") -> Tensor[(5, 3, 1), float32] {
    mean(%p019, axis=[2], keepdims=True) /* ty=Tensor[(5, 3, 1), float32] */
  } /* ty=fn (Tensor[(5, 3, 1), float32]) -> Tensor[(5, 3, 1), float32] */;
  %71 = %70(%69) /* ty=Tensor[(5, 3, 1), float32] */;
  %72 = fn (%p020: Tensor[(5, 3, 1), float32] /* ty=Tensor[(5, 3, 1), float32] */, %p15: Tensor[(5, 3, 1), float32] /* ty=Tensor[(5, 3, 1), float32] */, Primitive=1, hash="a3e7ad60a2c2ba44") -> Tensor[(5, 3, 1), float32] {
    variance(%p020, %p15, axis=[2], keepdims=True) /* ty=Tensor[(5, 3, 1), float32] */
  } /* ty=fn (Tensor[(5, 3, 1), float32], Tensor[(5, 3, 1), float32]) -> Tensor[(5, 3, 1), float32] */;
  %73 = %72(%69, %71) /* ty=Tensor[(5, 3, 1), float32] */;
  %74 = fn (%p07: Tensor[(5, 3, 1), float32] /* ty=Tensor[(5, 3, 1), float32] */, %p11: Tensor[(5, 3, 1), float32] /* ty=Tensor[(5, 3, 1), float32] */, %p21: Tensor[(5, 3, 1), float32] /* ty=Tensor[(5, 3, 1), float32] */, %p3: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %p4: Tensor[(5, 3), float32] /* ty=Tensor[(5, 3), float32] */, Primitive=1, hash="d19067cd815ae578") -> Tensor[(5, 3), float32] {
    %31 = add(%p21, 1e-05f /* ty=float32 */) /* ty=Tensor[(5, 3, 1), float32] */;
    %32 = subtract(%p07, %p11) /* ty=Tensor[(5, 3, 1), float32] */;
    %33 = sqrt(%31) /* ty=Tensor[(5, 3, 1), float32] */;
    %34 = divide(%32, %33) /* ty=Tensor[(5, 3, 1), float32] */;
    %35 = reshape(%34, newshape=[5, 3]) /* ty=Tensor[(5, 3), float32] */;
    %36 = multiply(%35, %p3) /* ty=Tensor[(5, 3), float32] */;
    %37 = minimum(%36, %p4) /* ty=Tensor[(5, 3), float32] */;
    nn.batch_flatten(%37) /* ty=Tensor[(5, 3), float32] */
  } /* ty=fn (Tensor[(5, 3, 1), float32], Tensor[(5, 3, 1), float32], Tensor[(5, 3, 1), float32], Tensor[(3), float32], Tensor[(5, 3), float32]) -> Tensor[(5, 3), float32] */;
  %75 = %74(%69, %71, %73, %x1, %63) /* ty=Tensor[(5, 3), float32] */;
  %76 = fn (%p06: Tensor[(5, 1, 1), float32] /* ty=Tensor[(5, 1, 1), float32] */, %p1: Tensor[(5, 3), float32] /* ty=Tensor[(5, 3), float32] */, %p2: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="fa9c72e9ee5c5096") -> Tensor[(5, 5), float32] {
    %24 = sigmoid(%p06) /* ty=Tensor[(5, 1, 1), float32] */;
    %25 = maximum(%p1, %p2) /* ty=Tensor[(5, 3), float32] */;
    %26 = fast_exp(%25) /* ty=Tensor[(5, 3), float32] */;
    %27 = sin(%24) /* ty=Tensor[(5, 1, 1), float32] */;
    %28 = expand_dims(%26, axis=0) /* ty=Tensor[(1, 5, 3), float32] */;
    %29 = minimum(%27, %28) /* ty=Tensor[(5, 5, 3), float32] */;
    %30 = cos(%29) /* ty=Tensor[(5, 5, 3), float32] */;
    sum(%30, axis=[2]) /* ty=Tensor[(5, 5), float32] */
  } /* ty=fn (Tensor[(5, 1, 1), float32], Tensor[(5, 3), float32], Tensor[(5, 1), float32]) -> Tensor[(5, 5), float32] */;
  %77 = %76(%20, %75, %61) /* ty=Tensor[(5, 5), float32] */;
  %78 = fn (%p05: Tensor[(5, 5), float32] /* ty=Tensor[(5, 5), float32] */, Primitive=1, hash="7cd27defcaf2289f") -> Tensor[(5, 5), float32] {
    nn.leaky_relu(%p05, alpha=0.15056f) /* ty=Tensor[(5, 5), float32] */
  } /* ty=fn (Tensor[(5, 5), float32]) -> Tensor[(5, 5), float32] */;
  %79 = fn (%p021: Tensor[(5, 1), float32] /* ty=Tensor[(5, 1), float32] */, Primitive=1, hash="496e37d8e5c0ea87") -> Tensor[(5, 1), float32] {
    transpose(%p021, axes=[0, 1]) /* ty=Tensor[(5, 1), float32] */
  } /* ty=fn (Tensor[(5, 1), float32]) -> Tensor[(5, 1), float32] */;
  %80 = %23(%22) /* ty=Tensor[(5), float32] */;
  %81 = %78(%77) /* ty=Tensor[(5, 5), float32] */;
  %82 = %79(%59) /* ty=Tensor[(5, 1), float32] */;
  (%80, %81, %82) /* ty=(Tensor[(5), float32], Tensor[(5, 5), float32], Tensor[(5, 1), float32]) span=from_string:3:3 */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "VirtualDevice"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "1", 
        "memory_scope": "15", 
        "target": "4", 
        "virtual_device_id": "0"
      }
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "14", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "TargetKind", 
      "attrs": {
        "default_device_type": "1", 
        "default_keys": "7", 
        "name": "6"
      }
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "llvm"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "cpu"
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "mtriple"
      ], 
      "data": [12]
    }, 
    {
      "type_key": "runtime.String", 
      "repr_str": "x86_64-unknown-linux-gnu"
    }, 
    {
      "type_key": "Map"
    }, 
    {
      "type_key": "Target", 
      "attrs": {
        "attrs": "11", 
        "features": "13", 
        "host": "0", 
        "keys": "10", 
        "kind": "5", 
        "tag": "9"
      }
    }, 
    {
      "type_key": "runtime.String"
    }
  ], 
  "b64ndarrays": [], 
  "attrs": {"tvm_version": "0.16.0"}
}